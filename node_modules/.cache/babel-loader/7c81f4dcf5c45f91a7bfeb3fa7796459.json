{"ast":null,"code":"var _jsxFileName = \"/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/Recorder.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from 'react';\nimport { render } from \"react-dom\";\nimport useRecorder from \"./useRecorder\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nconst Recorder = props => {\n  _s();\n\n  let [audioURL, isRecording, startRecording, stopRecording, rawData] = useRecorder();\n  let audioRef = useRef();\n  const audio = audioRef.current; // const handlestop = props.sets(rawData)\n\n  const currentAudio = audio ? audio.addEventListener('canplaythrough', event => {\n    if (isRecording) props.sets(rawData);\n  }) : \"NONE\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Recorder\",\n    id: \"recorder\",\n    ref: props.forwardedRef,\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      src: audioURL,\n      ref: audioRef,\n      controls: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      disabled: isRecording,\n      children: \"start recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopRecording,\n      disabled: !isRecording,\n      children: \"stop recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Recorder, \"tevX4B3W48O3YnghCIFtF8kuDx8=\", false, function () {\n  return [useRecorder];\n});\n\n_c = Recorder;\nexport default Recorder;\n\nvar _c;\n\n$RefreshReg$(_c, \"Recorder\");","map":{"version":3,"sources":["/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/Recorder.js"],"names":["useState","useRef","render","useRecorder","axios","defaults","xsrfCookieName","xsrfHeaderName","Recorder","props","audioURL","isRecording","startRecording","stopRecording","rawData","audioRef","audio","current","currentAudio","addEventListener","event","sets","forwardedRef"],"mappings":";;;AACA,SAASA,QAAT,EAAmBC,MAAnB,QAAkC,OAAlC;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEAA,KAAK,CAACC,QAAN,CAAeC,cAAf,GAAgC,WAAhC;AACAF,KAAK,CAACC,QAAN,CAAeE,cAAf,GAAgC,aAAhC;;AAGA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,MAAI,CAACC,QAAD,EAAWC,WAAX,EAAwBC,cAAxB,EAAwCC,aAAxC,EAAuDC,OAAvD,IAAkEX,WAAW,EAAjF;AACA,MAAIY,QAAQ,GAAGd,MAAM,EAArB;AAEA,QAAMe,KAAK,GAAGD,QAAQ,CAACE,OAAvB,CAJ0B,CAM1B;;AAEA,QAAMC,YAAY,GAAGF,KAAK,GAAGA,KAAK,CAACG,gBAAN,CAAuB,gBAAvB,EAA0CC,KAAD,IAAW;AAC/E,QAAIT,WAAJ,EACAF,KAAK,CAACY,IAAN,CAAWP,OAAX;AAAoB,GAFO,CAAH,GAEA,MAF1B;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,EAAE,EAAC,UAA7B;AAAwC,IAAA,GAAG,EAAEL,KAAK,CAACa,YAAnD;AAAA,4BACE;AAAO,MAAA,GAAG,EAAEZ,QAAZ;AAAsB,MAAA,GAAG,EAAEK,QAA3B;AAAqC,MAAA,QAAQ;AAA7C;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAEH,cAAjB;AAAiC,MAAA,QAAQ,EAAED,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE;AAAQ,MAAA,OAAO,EAAEE,aAAjB;AAAgC,MAAA,QAAQ,EAAE,CAACF,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAvBD;;GAAMH,Q;UACkEL,W;;;KADlEK,Q;AAwBN,eAAeA,QAAf","sourcesContent":["\nimport { useState, useRef } from  'react'\nimport { render } from \"react-dom\";\nimport useRecorder from \"./useRecorder\";\nimport axios from \"axios\";\n\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\n\n\nconst Recorder = (props) => {\n  let [audioURL, isRecording, startRecording, stopRecording, rawData] = useRecorder();\n  let audioRef = useRef()\n\n  const audio = audioRef.current\n\n  // const handlestop = props.sets(rawData)\n  \n  const currentAudio = audio ? audio.addEventListener('canplaythrough', (event) => {\n    if (isRecording)\n    props.sets(rawData)}) : \"NONE\";\n\n  return (\n    <div className=\"Recorder\" id=\"recorder\" ref={props.forwardedRef}>\n      <audio src={audioURL} ref={audioRef} controls/>\n      <button onClick={startRecording} disabled={isRecording}>\n        start recording\n      </button>\n      <button onClick={stopRecording} disabled={!isRecording}>\n        stop recording\n      </button>\n    </div>\n  );\n}\nexport default Recorder;"]},"metadata":{},"sourceType":"module"}