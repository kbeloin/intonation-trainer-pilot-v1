{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nvar options = {\n  audioBitsPerSecond: 16000\n};\nvar chunks = [];\n\nconst useRecorder = () => {\n  _s();\n\n  const [audioURL, setAudioURL] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [recorder, setRecorder] = useState(null);\n  const [rawData, setRawData] = useState(null);\n  useEffect(() => {\n    // Lazily obtain recorder first time we're recording.\n    if (recorder === null) {\n      if (isRecording) {\n        requestRecorder().then(setRecorder, console.error);\n      }\n\n      return;\n    } // Manage recorder state.\n\n\n    if (isRecording) {\n      recorder.start();\n    } else {\n      recorder.stop();\n    } // Obtain the audio when ready.\n\n\n    const handleData = e => {\n      const blob = new Blob([e.data], {\n        'type': 'audio/wav; base64'\n      }); // Trying to set the media type here so it matches with upload\n\n      console.log(blob);\n      setRawData(blob);\n      setAudioURL(URL.createObjectURL(e.data)); // readyState will be 2\n    };\n\n    recorder.addEventListener(\"dataavailable\", handleData);\n    return () => recorder.removeEventListener(\"dataavailable\", handleData);\n  }, [recorder, isRecording]);\n\n  const startRecording = () => {\n    setIsRecording(true);\n  };\n\n  const stopRecording = () => {\n    setIsRecording(false);\n  };\n\n  return [audioURL, isRecording, startRecording, stopRecording, rawData];\n};\n\n_s(useRecorder, \"/t57FCeX2vt5NX2vpkjGLb89s9w=\");\n\nasync function requestRecorder() {\n  const stream = await navigator.mediaDevices.getUserMedia({\n    audio: true\n  });\n  return new MediaRecorder(stream, options);\n}\n\nexport default useRecorder;","map":{"version":3,"sources":["/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/useRecorder.js"],"names":["useEffect","useState","options","audioBitsPerSecond","chunks","useRecorder","audioURL","setAudioURL","isRecording","setIsRecording","recorder","setRecorder","rawData","setRawData","requestRecorder","then","console","error","start","stop","handleData","e","blob","Blob","data","log","URL","createObjectURL","addEventListener","removeEventListener","startRecording","stopRecording","stream","navigator","mediaDevices","getUserMedia","audio","MediaRecorder"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAGA,IAAIC,OAAO,GAAG;AACZC,EAAAA,kBAAkB,EAAE;AADR,CAAd;AAIA,IAAIC,MAAM,GAAG,EAAb;;AAGA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIU,QAAQ,KAAK,IAAjB,EAAuB;AACrB,UAAIF,WAAJ,EAAiB;AACfM,QAAAA,eAAe,GAAGC,IAAlB,CAAuBJ,WAAvB,EAAoCK,OAAO,CAACC,KAA5C;AACD;;AACD;AACD,KAPa,CASd;;;AACA,QAAIT,WAAJ,EAAiB;AACfE,MAAAA,QAAQ,CAACQ,KAAT;AACD,KAFD,MAEO;AACLR,MAAAA,QAAQ,CAACS,IAAT;AACD,KAda,CAgBd;;;AACA,UAAMC,UAAU,GAAGC,CAAC,IAAI;AAExB,YAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACF,CAAC,CAACG,IAAH,CAAT,EAAmB;AAAE,gBAAS;AAAX,OAAnB,CAAb,CAFwB,CAE2C;;AACnER,MAAAA,OAAO,CAACS,GAAR,CAAYH,IAAZ;AACAT,MAAAA,UAAU,CAACS,IAAD,CAAV;AACAf,MAAAA,WAAW,CAACmB,GAAG,CAACC,eAAJ,CAAoBN,CAAC,CAACG,IAAtB,CAAD,CAAX,CALwB,CAKkB;AACzC,KAND;;AAQAd,IAAAA,QAAQ,CAACkB,gBAAT,CAA0B,eAA1B,EAA2CR,UAA3C;AACA,WAAO,MAAMV,QAAQ,CAACmB,mBAAT,CAA6B,eAA7B,EAA8CT,UAA9C,CAAb;AACD,GA3BQ,EA2BN,CAACV,QAAD,EAAWF,WAAX,CA3BM,CAAT;;AA6BA,QAAMsB,cAAc,GAAG,MAAM;AAC3BrB,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD,GAFD;;AAIA,QAAMsB,aAAa,GAAG,MAAM;AAC1BtB,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD,GAFD;;AAIA,SAAO,CAACH,QAAD,EAAWE,WAAX,EAAwBsB,cAAxB,EAAwCC,aAAxC,EAAuDnB,OAAvD,CAAP;AACD,CA5CD;;GAAMP,W;;AA8CN,eAAeS,eAAf,GAAiC;AAC/B,QAAMkB,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAApC,CAArB;AACA,SAAO,IAAIC,aAAJ,CAAkBL,MAAlB,EAA0B9B,OAA1B,CAAP;AACD;;AACD,eAAeG,WAAf","sourcesContent":["import { useEffect, useState } from \"react\";\n\n\nvar options = {\n  audioBitsPerSecond: 16000\n}\n\nvar chunks = []\n\n\nconst useRecorder = () => {\n  const [audioURL, setAudioURL] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [recorder, setRecorder] = useState(null);\n  const [rawData, setRawData] = useState(null)\n\n  useEffect(() => {\n    // Lazily obtain recorder first time we're recording.\n    if (recorder === null) {\n      if (isRecording) {\n        requestRecorder().then(setRecorder, console.error);\n      }\n      return;\n    }\n\n    // Manage recorder state.\n    if (isRecording) {\n      recorder.start();\n    } else {\n      recorder.stop();\n    }\n\n    // Obtain the audio when ready.\n    const handleData = e => {\n      \n    const blob = new Blob([e.data], { 'type' : 'audio/wav; base64' }); // Trying to set the media type here so it matches with upload\n    console.log(blob)\n    setRawData(blob);\n    setAudioURL(URL.createObjectURL(e.data)); // readyState will be 2\n    };\n\n    recorder.addEventListener(\"dataavailable\", handleData);\n    return () => recorder.removeEventListener(\"dataavailable\", handleData);\n  }, [recorder, isRecording]);\n\n  const startRecording = () => {\n    setIsRecording(true);\n  };\n\n  const stopRecording = () => {\n    setIsRecording(false);\n  };\n\n  return [audioURL, isRecording, startRecording, stopRecording, rawData];\n};\n\nasync function requestRecorder() {\n  const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n  return new MediaRecorder(stream, options);\n}\nexport default useRecorder;\n\n\n"]},"metadata":{},"sourceType":"module"}