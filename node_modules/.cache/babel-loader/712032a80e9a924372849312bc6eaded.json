{"ast":null,"code":"import React, { useState, useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\n\nconst getData = processedData => {\n  console.log(processedData);\n  const data = processedData['data'];\n  const time = data['time'];\n  const pitch = data['pitch'];\n  const datasets = [{\n    label: 'Pitch Dataset',\n    data: time.map((x, i) => ({\n      x,\n      y: pitch[i]\n    })),\n    backgroundColor: 'rgb(255, 99, 132)'\n  }];\n  console.log(datasets);\n  return datasets;\n};\n\nconst getConfig = data => {\n  const config = {\n    type: 'scatter',\n    data: data,\n    options: {\n      scales: {\n        xAxis: {\n          type: 'time'\n        }\n      }\n    }\n  };\n  return config;\n};\n\nexport const createChart = parent => {\n  const chart = document.createElement('canvas');\n  chart.setAttribute(\"id\", \"Chart\");\n  parent.appendChild(chart);\n  return chart;\n};\nexport const newChart = parent => {\n  if (!parent.firstChild) {\n    const chart = createChart(parent);\n  }\n\n  return;\n};\nexport const updateChart = (parent, data) => {\n  const oldChart = parent.firstChild;\n  const chartElement = createChart(parent);\n  const processedData = getData(data);\n  const config = getConfig(processedData);\n  var myChart = new Chart(chartElement, config);\n  console.log(\"Chart updated.\");\n  return;\n}; // export const updateChart = () => {\n// }\n\nexport default newChart;","map":{"version":3,"sources":["/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/SoundChart.js"],"names":["React","useState","useEffect","useRef","Chart","registerables","register","getData","processedData","console","log","data","time","pitch","datasets","label","map","x","i","y","backgroundColor","getConfig","config","type","options","scales","xAxis","createChart","parent","chart","document","createElement","setAttribute","appendChild","newChart","firstChild","updateChart","oldChart","chartElement","myChart"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,UAArC;AAEAD,KAAK,CAACE,QAAN,CAAe,GAAGD,aAAlB;;AAEA,MAAME,OAAO,GAAIC,aAAD,IAAmB;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ;AACA,QAAMG,IAAI,GAAGH,aAAa,CAAC,MAAD,CAA1B;AACA,QAAMI,IAAI,GAAGD,IAAI,CAAC,MAAD,CAAjB;AACA,QAAME,KAAK,GAAGF,IAAI,CAAC,OAAD,CAAlB;AAEA,QAAMG,QAAQ,GAAG,CAAC;AAChBC,IAAAA,KAAK,EAAE,eADS;AAEhBJ,IAAAA,IAAI,EAAEC,IAAI,CAACI,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,MAAW;AAAED,MAAAA,CAAF;AAAKE,MAAAA,CAAC,EAAEN,KAAK,CAACK,CAAD;AAAb,KAAX,CAAT,CAFU;AAGhBE,IAAAA,eAAe,EAAE;AAHD,GAAD,CAAjB;AAKAX,EAAAA,OAAO,CAACC,GAAR,CAAYI,QAAZ;AACA,SAAOA,QAAP;AAED,CAdH;;AAgBA,MAAMO,SAAS,GAAIV,IAAD,IAAU;AACxB,QAAMW,MAAM,GAAG;AACXC,IAAAA,IAAI,EAAE,SADK;AAEXZ,IAAAA,IAAI,EAAEA,IAFK;AAGXa,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE;AACHH,UAAAA,IAAI,EAAE;AADH;AADD;AADD;AAHE,GAAf;AAaA,SAAOD,MAAP;AACH,CAfD;;AAiBA,OAAO,MAAMK,WAAW,GAAIC,MAAD,IAAY;AACnC,QAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAd;AACAF,EAAAA,KAAK,CAACG,YAAN,CAAmB,IAAnB,EAAyB,OAAzB;AACAJ,EAAAA,MAAM,CAACK,WAAP,CAAmBJ,KAAnB;AACA,SAAOA,KAAP;AACH,CALM;AAOP,OAAO,MAAMK,QAAQ,GAAIN,MAAD,IAAY;AAChC,MAAI,CAACA,MAAM,CAACO,UAAZ,EAAwB;AACpB,UAAMN,KAAK,GAAGF,WAAW,CAACC,MAAD,CAAzB;AACH;;AACD;AACH,CALM;AAOP,OAAO,MAAMQ,WAAW,GAAG,CAACR,MAAD,EAASjB,IAAT,KAAkB;AACzC,QAAM0B,QAAQ,GAAGT,MAAM,CAACO,UAAxB;AAEA,QAAMG,YAAY,GAAGX,WAAW,CAACC,MAAD,CAAhC;AACA,QAAMpB,aAAa,GAAGD,OAAO,CAACI,IAAD,CAA7B;AACA,QAAMW,MAAM,GAAGD,SAAS,CAACb,aAAD,CAAxB;AAEA,MAAI+B,OAAO,GAAG,IAAInC,KAAJ,CACVkC,YADU,EAEVhB,MAFU,CAAd;AAIAb,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA;AACH,CAbM,C,CAgBP;AAEA;;AAEA,eAAewB,QAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { Chart, registerables } from 'chart.js'\n\nChart.register(...registerables);\n\nconst getData = (processedData) => {\n    console.log(processedData)\n    const data = processedData['data']\n    const time = data['time']\n    const pitch = data['pitch']\n\n    const datasets = [{\n      label: 'Pitch Dataset',\n      data: time.map((x, i) => ({ x, y: pitch[i] })),\n      backgroundColor: 'rgb(255, 99, 132)'\n    }]\n    console.log(datasets)\n    return datasets\n\n  };\n\nconst getConfig = (data) => {  \n    const config = {\n        type: 'scatter',\n        data: data,\n        options: {\n          scales: {\n            xAxis: {\n                type: 'time',\n                \n\n            }\n          }\n        }\n      };\n    return config\n}\n\nexport const createChart = (parent) => {\n    const chart = document.createElement('canvas');\n    chart.setAttribute(\"id\", \"Chart\");\n    parent.appendChild(chart)\n    return chart\n}\n\nexport const newChart = (parent) => {\n    if (!parent.firstChild) {\n        const chart = createChart(parent)\n    }\n    return\n}\n\nexport const updateChart = (parent, data) => {\n    const oldChart = parent.firstChild\n    \n    const chartElement = createChart(parent)\n    const processedData = getData(data)\n    const config = getConfig(processedData)\n\n    var myChart = new Chart(\n        chartElement,\n        config\n    );\n    console.log(\"Chart updated.\")\n    return \n}\n\n\n// export const updateChart = () => {\n\n// }\n\nexport default newChart\n"]},"metadata":{},"sourceType":"module"}