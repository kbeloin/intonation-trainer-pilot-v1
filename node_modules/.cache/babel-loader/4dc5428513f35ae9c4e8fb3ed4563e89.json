{"ast":null,"code":"import _regeneratorRuntime from\"/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{getCSRF}from'./csrfHelper.js';export var processAudioData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(data){var xhr,p3;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// Expects an array buffer, and returns converted pitch data. \nxhr=new XMLHttpRequest();xhr.open(\"POST\",\"/api/process/\",true);xhr.setRequestHeader(\"X-CSRFToken\",getCSRF());//Send the proper header information along with the request\nxhr.setRequestHeader(\"Content-Type\",\"application/octet-stream\");xhr.onreadystatechange=function(){// Call a function when the state changes.\nif(this.readyState===XMLHttpRequest.DONE&&this.status===200){var response=JSON.parse(xhr.responseText);return response;}};p3=new Promise(function(resolve,reject){resolve(xhr.send(JSON.stringify(data)));});case 6:case\"end\":return _context.stop();}}},_callee);}));return function processAudioData(_x){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/utils/processAudio.js"],"names":["getCSRF","processAudioData","data","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","DONE","status","response","JSON","parse","responseText","p3","Promise","resolve","reject","send","stringify"],"mappings":"yWAAA,OAASA,OAAT,KAAwB,iBAAxB,CAEA,MAAO,IAAMC,CAAAA,gBAAgB,0FAAG,iBAAOC,IAAP,6HAC5B;AACIC,GAFwB,CAElB,GAAIC,CAAAA,cAAJ,EAFkB,CAG5BD,GAAG,CAACE,IAAJ,CAAS,MAAT,CAAiB,eAAjB,CAAkC,IAAlC,EACAF,GAAG,CAACG,gBAAJ,CAAqB,aAArB,CAAoCN,OAAO,EAA3C,EACA;AACAG,GAAG,CAACG,gBAAJ,CAAqB,cAArB,CAAqC,0BAArC,EAEAH,GAAG,CAACI,kBAAJ,CAAyB,UAAW,CAAE;AAClC,GAAI,KAAKC,UAAL,GAAoBJ,cAAc,CAACK,IAAnC,EAA2C,KAAKC,MAAL,GAAgB,GAA/D,CAAoE,CAChE,GAAIC,CAAAA,QAAQ,CAAGC,IAAI,CAACC,KAAL,CAAWV,GAAG,CAACW,YAAf,CAAf,CACA,MAAOH,CAAAA,QAAP,CACH,CACJ,CALD,CAMII,EAdwB,CAcnB,GAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCD,OAAO,CAACd,GAAG,CAACgB,IAAJ,CAASP,IAAI,CAACQ,SAAL,CAAelB,IAAf,CAAT,CAAD,CAAP,CACD,CAFM,CAdmB,uDAAH,kBAAhBD,CAAAA,gBAAgB,4CAAtB","sourcesContent":["import { getCSRF } from './csrfHelper.js'\n\nexport const processAudioData = async (data) => {\n    // Expects an array buffer, and returns converted pitch data. \n    var xhr = new XMLHttpRequest()\n    xhr.open(\"POST\", \"/api/process/\", true);\n    xhr.setRequestHeader(\"X-CSRFToken\", getCSRF()); \n    //Send the proper header information along with the request\n    xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\n    \n    xhr.onreadystatechange = function() { // Call a function when the state changes.\n        if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {\n            var response = JSON.parse(xhr.responseText);\n            return response\n        }\n    }  \n    var p3 = new Promise((resolve, reject) => {\n        resolve(xhr.send(JSON.stringify(data)))\n      });\n    \n}"]},"metadata":{},"sourceType":"module"}