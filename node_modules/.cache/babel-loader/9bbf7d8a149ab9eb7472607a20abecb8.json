{"ast":null,"code":"import React, { useState, useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\n\nconst getData = processedData => {\n  console.log(processedData);\n  const data = processedData['data'];\n  const time = data['time'];\n  const pitch = data['pitch'];\n  const pData = time.map((x, i) => ({\n    x,\n    y: pitch[i]\n  }));\n  console.log(pData);\n  const datasets = [{\n    label: 'Pitch Dataset',\n    data: [{\n      x: 1,\n      y: 1\n    }, {\n      x: 1,\n      y: 1\n    }, {\n      x: 1,\n      y: 1\n    }, {\n      x: 1,\n      y: 1\n    }],\n    backgroundColor: 'rgba(255,0,0,0.5)'\n  }];\n  console.log(datasets);\n  return datasets;\n};\n\nconst getConfig = data => {\n  const config = {\n    type: 'scatter',\n    data: data,\n    options: {\n      scales: {\n        y: {\n          type: 'linear'\n        },\n        x: {\n          type: 'linear'\n        }\n      }\n    }\n  };\n  return config;\n};\n\nexport const createChart = parent => {\n  const chart = document.createElement('canvas');\n  chart.setAttribute(\"id\", \"Chart\");\n  parent.appendChild(chart);\n  return chart;\n};\nexport const newChart = element => {\n  const myChart = new Chart(element);\n  return myChart;\n};\nexport const updateChart = (chart, data) => {\n  const processedData = getData(data);\n  const config = getConfig(processedData);\n  chart.options();\n  chart.update();\n}; // export const updateChart = () => {\n// }\n\nexport default newChart;","map":{"version":3,"sources":["/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/SoundChart.js"],"names":["React","useState","useEffect","useRef","Chart","registerables","register","getData","processedData","console","log","data","time","pitch","pData","map","x","i","y","datasets","label","backgroundColor","getConfig","config","type","options","scales","createChart","parent","chart","document","createElement","setAttribute","appendChild","newChart","element","myChart","updateChart","update"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,UAArC;AAEAD,KAAK,CAACE,QAAN,CAAe,GAAGD,aAAlB;;AAEA,MAAME,OAAO,GAAIC,aAAD,IAAmB;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ;AACA,QAAMG,IAAI,GAAGH,aAAa,CAAC,MAAD,CAA1B;AACA,QAAMI,IAAI,GAAGD,IAAI,CAAC,MAAD,CAAjB;AACA,QAAME,KAAK,GAAGF,IAAI,CAAC,OAAD,CAAlB;AACA,QAAMG,KAAK,GAAGF,IAAI,CAACG,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,MAAW;AAAED,IAAAA,CAAF;AAAKE,IAAAA,CAAC,EAAEL,KAAK,CAACI,CAAD;AAAb,GAAX,CAAT,CAAd;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AAEA,QAAMK,QAAQ,GAAG,CAAC;AAChBC,IAAAA,KAAK,EAAE,eADS;AAEhBT,IAAAA,IAAI,EAAC,CAAE;AAACK,MAAAA,CAAC,EAAC,CAAH;AAAKE,MAAAA,CAAC,EAAC;AAAP,KAAF,EAAa;AAACF,MAAAA,CAAC,EAAC,CAAH;AAAKE,MAAAA,CAAC,EAAC;AAAP,KAAb,EAAwB;AAACF,MAAAA,CAAC,EAAC,CAAH;AAAKE,MAAAA,CAAC,EAAC;AAAP,KAAxB,EAAkC;AAACF,MAAAA,CAAC,EAAC,CAAH;AAAKE,MAAAA,CAAC,EAAC;AAAP,KAAlC,CAFW;AAGhBG,IAAAA,eAAe,EAAG;AAHF,GAAD,CAAjB;AAKAZ,EAAAA,OAAO,CAACC,GAAR,CAAYS,QAAZ;AACA,SAAOA,QAAP;AAED,CAhBH;;AAkBA,MAAMG,SAAS,GAAIX,IAAD,IAAU;AACxB,QAAMY,MAAM,GAAG;AACXC,IAAAA,IAAI,EAAE,SADK;AAEXb,IAAAA,IAAI,EAAEA,IAFK;AAGXc,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE;AACNR,QAAAA,CAAC,EAAE;AACCM,UAAAA,IAAI,EAAE;AADP,SADG;AAKNR,QAAAA,CAAC,EAAE;AACCQ,UAAAA,IAAI,EAAE;AADP;AALG;AADD;AAHE,GAAf;AAeA,SAAOD,MAAP;AACH,CAjBD;;AAmBA,OAAO,MAAMI,WAAW,GAAIC,MAAD,IAAY;AACnC,QAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAd;AACAF,EAAAA,KAAK,CAACG,YAAN,CAAmB,IAAnB,EAAyB,OAAzB;AACAJ,EAAAA,MAAM,CAACK,WAAP,CAAmBJ,KAAnB;AACA,SAAOA,KAAP;AACH,CALM;AAOP,OAAO,MAAMK,QAAQ,GAAIC,OAAD,IAAa;AACjC,QAAMC,OAAO,GAAG,IAAIhC,KAAJ,CACZ+B,OADY,CAAhB;AAGA,SAAOC,OAAP;AACH,CALM;AAOP,OAAO,MAAMC,WAAW,GAAG,CAACR,KAAD,EAAQlB,IAAR,KAAiB;AACxC,QAAMH,aAAa,GAAGD,OAAO,CAACI,IAAD,CAA7B;AACA,QAAMY,MAAM,GAAGD,SAAS,CAACd,aAAD,CAAxB;AACAqB,EAAAA,KAAK,CAACJ,OAAN;AACAI,EAAAA,KAAK,CAACS,MAAN;AACH,CALM,C,CAQP;AAEA;;AAEA,eAAeJ,QAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { Chart, registerables } from 'chart.js'\n\nChart.register(...registerables);\n\nconst getData = (processedData) => {\n    console.log(processedData)\n    const data = processedData['data']\n    const time = data['time']\n    const pitch = data['pitch']\n    const pData = time.map((x, i) => ({ x, y: pitch[i] }))\n    console.log(pData)\n\n    const datasets = [{\n      label: 'Pitch Dataset',\n      data:[ {x:1,y:1}, {x:1,y:1}, {x:1,y:1},{x:1,y:1} ],\n      backgroundColor : 'rgba(255,0,0,0.5)',\n    }]\n    console.log(datasets)\n    return datasets\n\n  };\n\nconst getConfig = (data) => {  \n    const config = {\n        type: 'scatter',\n        data: data,\n        options: {\n          scales: {\n            y: {\n                type: 'linear'\n\n            },\n            x: {\n                type: 'linear'\n            }\n          }\n        }\n      };\n    return config\n}\n\nexport const createChart = (parent) => {\n    const chart = document.createElement('canvas');\n    chart.setAttribute(\"id\", \"Chart\");\n    parent.appendChild(chart)\n    return chart\n}\n\nexport const newChart = (element) => {\n    const myChart = new Chart(\n        element\n    );\n    return myChart\n}\n\nexport const updateChart = (chart, data) => {\n    const processedData = getData(data)\n    const config = getConfig(processedData)\n    chart.options()\n    chart.update() \n}\n\n\n// export const updateChart = () => {\n\n// }\n\nexport default newChart\n"]},"metadata":{},"sourceType":"module"}