{"ast":null,"code":"import React, { useState, useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\n\nconst skipped = (ctx, value) => ctx.p0.skip || ctx.p1.skip ? value : undefined;\n\nconst down = (ctx, value) => ctx.p0.parsed.y > ctx.p1.parsed.y ? value : undefined;\n\nexport const getPitchScatterData = processedData => {\n  let data = processedData['data'] || [];\n\n  for (let i = 0; i < data.length; i++) {\n    if (data[i]['time'] === 0) {\n      data[i]['time'] = NaN;\n    }\n\n    if (data[i]['pitch'] === 0) {\n      data[i]['pitch'] = NaN;\n    }\n  }\n\n  return data['time'].map((x, i) => ({\n    x,\n    y: data['pitch'][i]\n  }));\n};\nexport const resetCanvas = (id, container_id, chart) => {\n  document.getElementById(id).remove();\n  const newCanvas = document.createElement('canvas');\n  newCanvas.setAttribute('id', id);\n  document.getElementById(container_id).append(newCanvas);\n  return newCanvas;\n};\nexport const newPitchChart = (element, data) => {\n  var ctx = element.getContext('2d');\n  const myChart = new Chart(ctx, {\n    type: 'scatter',\n    data: {\n      datasets: [{\n        label: 'Pitch Frequency',\n        data: data,\n        borderWidth: 1,\n        backgroundColor: 'rgb(255, 99, 132)'\n      }]\n    },\n    options: {\n      scales: {\n        y: {},\n        x: {}\n      }\n    }\n  });\n  return myChart;\n};\nexport const updateChart = (chart, data) => {\n  const processedData = getPitchScatterData(data);\n  chart.data.datasets.data = data;\n  chart.update();\n};\nexport default newPitchChart;","map":{"version":3,"sources":["/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/SoundChart.js"],"names":["React","useState","useEffect","useRef","Chart","registerables","register","skipped","ctx","value","p0","skip","p1","undefined","down","parsed","y","getPitchScatterData","processedData","data","i","length","NaN","map","x","resetCanvas","id","container_id","chart","document","getElementById","remove","newCanvas","createElement","setAttribute","append","newPitchChart","element","getContext","myChart","type","datasets","label","borderWidth","backgroundColor","options","scales","updateChart","update"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { Chart, registerables } from 'chart.js'\n\nChart.register(...registerables);\n\nconst skipped = (ctx, value) => ctx.p0.skip || ctx.p1.skip ? value : undefined;\nconst down = (ctx, value) => ctx.p0.parsed.y > ctx.p1.parsed.y ? value : undefined;\n\nexport const getPitchScatterData = (processedData) => {\n    \n    let data = processedData['data'] || []\n    for (let i = 0; i < data.length; i++) {\n        if (data[i]['time'] === 0) {\n            data[i]['time'] = NaN;\n        }\n        if (data[i]['pitch'] === 0) {\n            data[i]['pitch'] = NaN;\n        }\n      }\n\n    return data['time'].map((x, i) => ({ x, y: data['pitch'][i] }))\n}\n\nexport const resetCanvas = (id, container_id, chart) => {\n    document.getElementById(id).remove()\n    const newCanvas = document.createElement('canvas')\n    newCanvas.setAttribute('id', id)\n    document.getElementById(container_id).append(newCanvas)\n    return newCanvas\n}\n\nexport const newPitchChart = ( element, data ) => {\n    var ctx = element.getContext('2d')\n    \n    const myChart = new Chart(ctx, {\n            type: 'scatter',\n            data: {\n                datasets: [{\n                    label: 'Pitch Frequency',\n                    data: data,\n                    borderWidth: 1,\n                    backgroundColor: 'rgb(255, 99, 132)'\n                }]\n            },\n            options: {\n                scales: {\n                    y: { },\n                    x: { }\n                }\n            }\n        });\n    return myChart\n}\n\nexport const updateChart = (chart, data) => {\n    const processedData = getPitchScatterData(data)\n    chart.data.datasets.data = data\n    chart.update()\n}\n\nexport default newPitchChart\n"]},"metadata":{},"sourceType":"module"}