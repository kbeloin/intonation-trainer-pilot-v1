{"ast":null,"code":"import _toConsumableArray from\"/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import React,{useState,useEffect,useRef}from'react';import{Chart,registerables}from'chart.js';Chart.register.apply(Chart,_toConsumableArray(registerables));export var getData=function getData(processedData){var data=processedData['data']||[];var time=data['time'];var pitch=data['pitch'];var pData=time.map(function(x,i){return{x:x,y:pitch[i]};});console.log(pData);return pData;};var getConfig=function getConfig(){var config={type:'scatter',datasets:[],options:{scales:{x:{grid:{tickColor:'red'},ticks:{color:'blue'}}}}};return config;};export var createChart=function createChart(parent){var chart=document.createElement('canvas');chart.setAttribute(\"id\",\"Chart\");parent.appendChild(chart);return chart;};export var newChart=function newChart(element,data){var ctx=element.getContext('2d');var myChart=new Chart(ctx,{type:'scatter',data:{datasets:[{label:'Pitch Frequency',data:data,borderWidth:1,backgroundColor:'rgb(255, 99, 132)'}]},options:{scales:{y:{},x:{}}}});return myChart;};export var updateChart=function updateChart(chart,data){var processedData=getData(data);console.log(processedData);console.log(chart);chart.data.datasets.data=data;chart.update();};// export const updateChart = () => {\n// }\nexport default newChart;","map":{"version":3,"sources":["/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/SoundChart.js"],"names":["React","useState","useEffect","useRef","Chart","registerables","register","getData","processedData","data","time","pitch","pData","map","x","i","y","console","log","getConfig","config","type","datasets","options","scales","grid","tickColor","ticks","color","createChart","parent","chart","document","createElement","setAttribute","appendChild","newChart","element","ctx","getContext","myChart","label","borderWidth","backgroundColor","updateChart","update"],"mappings":"8LAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,CAAqCC,MAArC,KAAmD,OAAnD,CACA,OAASC,KAAT,CAAgBC,aAAhB,KAAqC,UAArC,CAEAD,KAAK,CAACE,QAAN,OAAAF,KAAK,oBAAaC,aAAb,EAAL,CAEA,MAAO,IAAME,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,aAAD,CAAmB,CACtC,GAAMC,CAAAA,IAAI,CAAGD,aAAa,CAAC,MAAD,CAAb,EAAyB,EAAtC,CACA,GAAME,CAAAA,IAAI,CAAGD,IAAI,CAAC,MAAD,CAAjB,CACA,GAAME,CAAAA,KAAK,CAAGF,IAAI,CAAC,OAAD,CAAlB,CACA,GAAMG,CAAAA,KAAK,CAAGF,IAAI,CAACG,GAAL,CAAS,SAACC,CAAD,CAAIC,CAAJ,QAAW,CAAED,CAAC,CAADA,CAAF,CAAKE,CAAC,CAAEL,KAAK,CAACI,CAAD,CAAb,CAAX,EAAT,CAAd,CAEAE,OAAO,CAACC,GAAR,CAAYN,KAAZ,EAEA,MAAOA,CAAAA,KAAP,CACH,CATM,CAYP,GAAMO,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACpB,GAAMC,CAAAA,MAAM,CAAG,CACXC,IAAI,CAAE,SADK,CAEXC,QAAQ,CAAE,EAFC,CAGXC,OAAO,CAAE,CACPC,MAAM,CAAE,CACNV,CAAC,CAAE,CACDW,IAAI,CAAE,CACJC,SAAS,CAAE,KADP,CADL,CAIDC,KAAK,CAAE,CACLC,KAAK,CAAE,MADF,CAJN,CADG,CADD,CAHE,CAAf,CAgBA,MAAOR,CAAAA,MAAP,CACH,CAlBD,CAoBA,MAAO,IAAMS,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,MAAD,CAAY,CACnC,GAAMC,CAAAA,KAAK,CAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAd,CACAF,KAAK,CAACG,YAAN,CAAmB,IAAnB,CAAyB,OAAzB,EACAJ,MAAM,CAACK,WAAP,CAAmBJ,KAAnB,EACA,MAAOA,CAAAA,KAAP,CACH,CALM,CAOP,MAAO,IAAMK,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAEC,OAAF,CAAW5B,IAAX,CAAqB,CACzC,GAAI6B,CAAAA,GAAG,CAAGD,OAAO,CAACE,UAAR,CAAmB,IAAnB,CAAV,CACA,GAAMC,CAAAA,OAAO,CAAG,GAAIpC,CAAAA,KAAJ,CAAUkC,GAAV,CAAe,CACvBjB,IAAI,CAAE,SADiB,CAEvBZ,IAAI,CAAE,CACFa,QAAQ,CAAE,CAAC,CACPmB,KAAK,CAAE,iBADA,CAEPhC,IAAI,CAAEA,IAFC,CAGPiC,WAAW,CAAE,CAHN,CAIPC,eAAe,CAAE,mBAJV,CAAD,CADR,CAFiB,CAUvBpB,OAAO,CAAE,CACLC,MAAM,CAAE,CACJR,CAAC,CAAE,EADC,CAEJF,CAAC,CAAE,EAFC,CADH,CAVc,CAAf,CAAhB,CAiBA,MAAO0B,CAAAA,OAAP,CACH,CApBM,CAsBP,MAAO,IAAMI,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACb,KAAD,CAAQtB,IAAR,CAAiB,CACxC,GAAMD,CAAAA,aAAa,CAAGD,OAAO,CAACE,IAAD,CAA7B,CACAQ,OAAO,CAACC,GAAR,CAAYV,aAAZ,EACAS,OAAO,CAACC,GAAR,CAAYa,KAAZ,EACAA,KAAK,CAACtB,IAAN,CAAWa,QAAX,CAAoBb,IAApB,CAA2BA,IAA3B,CACAsB,KAAK,CAACc,MAAN,GAEH,CAPM,CAUP;AAEA;AAEA,cAAeT,CAAAA,QAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { Chart, registerables } from 'chart.js'\n\nChart.register(...registerables);\n\nexport const getData = (processedData) => {\n    const data = processedData['data'] || []\n    const time = data['time']\n    const pitch = data['pitch']\n    const pData = time.map((x, i) => ({ x, y: pitch[i] }))\n    \n    console.log(pData)\n    \n    return pData\n}\n\n\nconst getConfig = () => {  \n    const config = {\n        type: 'scatter',\n        datasets: [],\n        options: {\n          scales: {\n            x: {\n              grid: {\n                tickColor: 'red'\n              },\n              ticks: {\n                color: 'blue',\n              }\n            }\n          }\n        }\n      };\n    return config\n}\n\nexport const createChart = (parent) => {\n    const chart = document.createElement('canvas');\n    chart.setAttribute(\"id\", \"Chart\");\n    parent.appendChild(chart)\n    return chart\n}\n\nexport const newChart = ( element, data ) => {\n    var ctx = element.getContext('2d')\n    const myChart = new Chart(ctx, {\n            type: 'scatter',\n            data: {\n                datasets: [{\n                    label: 'Pitch Frequency',\n                    data: data,\n                    borderWidth: 1,\n                    backgroundColor: 'rgb(255, 99, 132)'\n                }]\n            },\n            options: {\n                scales: {\n                    y: { },\n                    x: { }\n                }\n            }\n        });\n    return myChart\n}\n\nexport const updateChart = (chart, data) => {\n    const processedData = getData(data)\n    console.log(processedData)\n    console.log(chart)\n    chart.data.datasets.data = data\n    chart.update()\n    \n}\n\n\n// export const updateChart = () => {\n\n// }\n\nexport default newChart\n"]},"metadata":{},"sourceType":"module"}