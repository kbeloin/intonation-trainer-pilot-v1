{"ast":null,"code":"var _jsxFileName = \"/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/Recorder.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from 'react';\nimport { render } from \"react-dom\";\nimport useRecorder from \"./useRecorder\";\nimport axios from \"axios\";\nimport { Button, Container } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\n\nconst Recorder = props => {\n  _s();\n\n  let [audioURL, isRecording, startRecording, stopRecording, rawData] = useRecorder();\n  let audioRef = useRef();\n  const audio = audioRef.current; // const handlestop = props.sets(rawData)\n\n  const currentAudio = audio ? audio.addEventListener('canplaythrough', event => {\n    if (rawData) {\n      props.sets(rawData);\n    }\n\n    ;\n    return;\n  }) : \"NONE\";\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"Recorder\",\n    id: \"recorder\",\n    ref: props.forwardedRef,\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      src: audioURL,\n      ref: audioRef,\n      controls: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: startRecording,\n      disabled: isRecording,\n      children: \"start recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: stopRecording,\n      disabled: !isRecording,\n      children: \"stop recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Recorder, \"tevX4B3W48O3YnghCIFtF8kuDx8=\", false, function () {\n  return [useRecorder];\n});\n\n_c = Recorder;\nexport default Recorder;\n\nvar _c;\n\n$RefreshReg$(_c, \"Recorder\");","map":{"version":3,"sources":["/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/Recorder.js"],"names":["useState","useRef","render","useRecorder","axios","Button","Container","defaults","xsrfCookieName","xsrfHeaderName","Recorder","props","audioURL","isRecording","startRecording","stopRecording","rawData","audioRef","audio","current","currentAudio","addEventListener","event","sets","forwardedRef"],"mappings":";;;AACA,SAASA,QAAT,EAAmBC,MAAnB,QAAkC,OAAlC;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,mBAAlC;;AAEAF,KAAK,CAACG,QAAN,CAAeC,cAAf,GAAgC,WAAhC;AACAJ,KAAK,CAACG,QAAN,CAAeE,cAAf,GAAgC,aAAhC;;AAGA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,MAAI,CAACC,QAAD,EAAWC,WAAX,EAAwBC,cAAxB,EAAwCC,aAAxC,EAAuDC,OAAvD,IAAkEb,WAAW,EAAjF;AACA,MAAIc,QAAQ,GAAGhB,MAAM,EAArB;AAEA,QAAMiB,KAAK,GAAGD,QAAQ,CAACE,OAAvB,CAJ0B,CAM1B;;AAEA,QAAMC,YAAY,GAAGF,KAAK,GAAGA,KAAK,CAACG,gBAAN,CAAuB,gBAAvB,EAA0CC,KAAD,IAAW;AAC/E,QAAIN,OAAJ,EAAa;AAACL,MAAAA,KAAK,CAACY,IAAN,CAAWP,OAAX;AAAoB;;AAAA;AAClC;AACD,GAH4B,CAAH,GAGrB,MAHL;AAKA,sBACE,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,UAArB;AAAgC,IAAA,EAAE,EAAC,UAAnC;AAA8C,IAAA,GAAG,EAAEL,KAAK,CAACa,YAAzD;AAAA,4BACE;AAAO,MAAA,GAAG,EAAEZ,QAAZ;AAAsB,MAAA,GAAG,EAAEK,QAA3B;AAAqC,MAAA,QAAQ;AAA7C;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEH,cAAjB;AAAiC,MAAA,QAAQ,EAAED,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEE,aAAjB;AAAgC,MAAA,QAAQ,EAAE,CAACF,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAxBD;;GAAMH,Q;UACkEP,W;;;KADlEO,Q;AAyBN,eAAeA,QAAf","sourcesContent":["\nimport { useState, useRef } from  'react'\nimport { render } from \"react-dom\";\nimport useRecorder from \"./useRecorder\";\nimport axios from \"axios\";\nimport { Button, Container } from '@material-ui/core'\n\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\n\n\nconst Recorder = (props) => {\n  let [audioURL, isRecording, startRecording, stopRecording, rawData] = useRecorder();\n  let audioRef = useRef()\n\n  const audio = audioRef.current\n\n  // const handlestop = props.sets(rawData)\n  \n  const currentAudio = audio ? audio.addEventListener('canplaythrough', (event) => {\n    if (rawData) {props.sets(rawData)};\n    return\n  }) : \"NONE\";\n\n  return (\n    <Container className=\"Recorder\" id=\"recorder\" ref={props.forwardedRef}>\n      <audio src={audioURL} ref={audioRef} controls/>\n      <Button onClick={startRecording} disabled={isRecording}>\n        start recording\n      </Button>\n      <Button onClick={stopRecording} disabled={!isRecording}>\n        stop recording\n      </Button>\n    </Container>\n  );\n}\nexport default Recorder;"]},"metadata":{},"sourceType":"module"}