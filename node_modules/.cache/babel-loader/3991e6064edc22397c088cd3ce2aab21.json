{"ast":null,"code":"import { getCSRF } from './csrfHelper.js';\nexport async function processAudioData(data) {\n  // Expects an array buffer, and returns converted pitch data. \n  var xhr = new XMLHttpRequest();\n  xhr.open(\"POST\", \"/api/process/\", true);\n  xhr.setRequestHeader(\"X-CSRFToken\", getCSRF()); //Send the proper header information along with the request\n\n  xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\n\n  xhr.onreadystatechange = async function () {\n    // Call a function when the state changes.\n    if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {\n      return await Promise.resolve(JSON.parse(xhr.responseText));\n      console.log(response);\n      return response;\n    }\n  };\n\n  xhr.send(JSON.stringify(data));\n}\nexport default processAudioData;","map":{"version":3,"sources":["/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/utils/processAudio.js"],"names":["getCSRF","processAudioData","data","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","DONE","status","Promise","resolve","JSON","parse","responseText","console","log","response","send","stringify"],"mappings":"AAAA,SAASA,OAAT,QAAwB,iBAAxB;AAEA,OAAO,eAAeC,gBAAf,CAAgCC,IAAhC,EAAsC;AACzC;AACA,MAAIC,GAAG,GAAG,IAAIC,cAAJ,EAAV;AACAD,EAAAA,GAAG,CAACE,IAAJ,CAAS,MAAT,EAAiB,eAAjB,EAAkC,IAAlC;AACAF,EAAAA,GAAG,CAACG,gBAAJ,CAAqB,aAArB,EAAoCN,OAAO,EAA3C,EAJyC,CAKzC;;AACAG,EAAAA,GAAG,CAACG,gBAAJ,CAAqB,cAArB,EAAqC,0BAArC;;AAEAH,EAAAA,GAAG,CAACI,kBAAJ,GAAyB,kBAAkB;AAAE;AACzC,QAAI,KAAKC,UAAL,KAAoBJ,cAAc,CAACK,IAAnC,IAA2C,KAAKC,MAAL,KAAgB,GAA/D,EAAoE;AAChE,aAAO,MAAMC,OAAO,CAACC,OAAR,CAAgBC,IAAI,CAACC,KAAL,CAAWX,GAAG,CAACY,YAAf,CAAhB,CAAb;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ;AACA,aAAOA,QAAP;AAEH;AACJ,GAPD;;AAQAf,EAAAA,GAAG,CAACgB,IAAJ,CAASN,IAAI,CAACO,SAAL,CAAelB,IAAf,CAAT;AACH;AAED,eAAeD,gBAAf","sourcesContent":["import { getCSRF } from './csrfHelper.js'\n\nexport async function processAudioData(data) {\n    // Expects an array buffer, and returns converted pitch data. \n    var xhr = new XMLHttpRequest()\n    xhr.open(\"POST\", \"/api/process/\", true);\n    xhr.setRequestHeader(\"X-CSRFToken\", getCSRF()); \n    //Send the proper header information along with the request\n    xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\n    \n    xhr.onreadystatechange = async function () { // Call a function when the state changes.\n        if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {\n            return await Promise.resolve(JSON.parse(xhr.responseText));\n            console.log(response)\n            return response\n            \n        }\n    }  \n    xhr.send(JSON.stringify(data))\n}\n\nexport default processAudioData"]},"metadata":{},"sourceType":"module"}