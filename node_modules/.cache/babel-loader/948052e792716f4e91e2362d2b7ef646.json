{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nconst ctx = new AudioContext();\nvar options = {\n  audioBitsPerSecond: 16000\n};\nvar chunks = [];\n\nconst useRecorder = () => {\n  _s();\n\n  const [audioURL, setAudioURL] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [recorder, setRecorder] = useState(null);\n  const [rawData, setRawData] = useState(null);\n  useEffect(() => {\n    // Lazily obtain recorder first time we're recording.\n    if (recorder === null) {\n      if (isRecording) {\n        requestRecorder().then(setRecorder, console.error);\n      }\n\n      return;\n    } // Manage recorder state.\n\n\n    if (isRecording) {\n      recorder.start();\n    } else {\n      recorder.stop();\n    } // Obtain the audio when ready.\n\n\n    const handleData = e => {\n      console.log(e.data);\n      const blob = new Blob([e.data]);\n      var reader = new FileReader();\n      reader.readAsArrayBuffer(blob);\n\n      reader.onloadend = () => {\n        let view = new Uint8Array(reader.result);\n        ctx.decodeAudioData(blob).then(function (decodedData) {\n          // use the decoded data here\n          console.log(decodedData);\n        });\n        setRawData(view);\n        setAudioURL(URL.createObjectURL(e.data)); //log of base64data is \"data:audio/ogg; codecs=opus;base64,GkX...\"\n      };\n    }; // Trying to set the media type here so it matches with upload\n    // readyState will be 2\n\n\n    recorder.addEventListener(\"dataavailable\", handleData);\n    return () => recorder.removeEventListener(\"dataavailable\", handleData);\n  }, [recorder, isRecording]);\n\n  const startRecording = () => {\n    setIsRecording(true);\n  };\n\n  const stopRecording = () => {\n    setIsRecording(false);\n  };\n\n  return [audioURL, isRecording, startRecording, stopRecording, rawData];\n};\n\n_s(useRecorder, \"/t57FCeX2vt5NX2vpkjGLb89s9w=\");\n\nasync function requestRecorder() {\n  const stream = await navigator.mediaDevices.getUserMedia({\n    audio: true\n  });\n  return new MediaRecorder(stream, options);\n}\n\nexport default useRecorder;","map":{"version":3,"sources":["/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/useRecorder.js"],"names":["useEffect","useState","ctx","AudioContext","options","audioBitsPerSecond","chunks","useRecorder","audioURL","setAudioURL","isRecording","setIsRecording","recorder","setRecorder","rawData","setRawData","requestRecorder","then","console","error","start","stop","handleData","e","log","data","blob","Blob","reader","FileReader","readAsArrayBuffer","onloadend","view","Uint8Array","result","decodeAudioData","decodedData","URL","createObjectURL","addEventListener","removeEventListener","startRecording","stopRecording","stream","navigator","mediaDevices","getUserMedia","audio","MediaRecorder"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,MAAMC,GAAG,GAAG,IAAIC,YAAJ,EAAZ;AAEA,IAAIC,OAAO,GAAG;AACZC,EAAAA,kBAAkB,EAAE;AADR,CAAd;AAIA,IAAIC,MAAM,GAAG,EAAb;;AAGA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIY,QAAQ,KAAK,IAAjB,EAAuB;AACrB,UAAIF,WAAJ,EAAiB;AACfM,QAAAA,eAAe,GAAGC,IAAlB,CAAuBJ,WAAvB,EAAoCK,OAAO,CAACC,KAA5C;AACD;;AACD;AACD,KAPa,CASd;;;AACA,QAAIT,WAAJ,EAAiB;AACfE,MAAAA,QAAQ,CAACQ,KAAT;AACD,KAFD,MAEO;AACLR,MAAAA,QAAQ,CAACS,IAAT;AACD,KAda,CAgBd;;;AACA,UAAMC,UAAU,GAAGC,CAAC,IAAI;AACxBL,MAAAA,OAAO,CAACM,GAAR,CAAYD,CAAC,CAACE,IAAd;AACA,YAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACJ,CAAC,CAACE,IAAH,CAAT,CAAb;AAGA,UAAIG,MAAM,GAAG,IAAIC,UAAJ,EAAb;AACAD,MAAAA,MAAM,CAACE,iBAAP,CAAyBJ,IAAzB;;AACAE,MAAAA,MAAM,CAACG,SAAP,GAAmB,MAAM;AAEvB,YAAIC,IAAI,GAAG,IAAIC,UAAJ,CAAeL,MAAM,CAACM,MAAtB,CAAX;AACAhC,QAAAA,GAAG,CAACiC,eAAJ,CAAoBT,IAApB,EAA0BT,IAA1B,CAA+B,UAASmB,WAAT,EAAsB;AACnD;AACAlB,UAAAA,OAAO,CAACM,GAAR,CAAYY,WAAZ;AACA,SAHF;AAKArB,QAAAA,UAAU,CAACiB,IAAD,CAAV;AACAvB,QAAAA,WAAW,CAAC4B,GAAG,CAACC,eAAJ,CAAoBf,CAAC,CAACE,IAAtB,CAAD,CAAX,CATuB,CASiB;AACzC,OAVD;AAYC,KAnBD,CAjBc,CAsCb;AAGD;;;AAEAb,IAAAA,QAAQ,CAAC2B,gBAAT,CAA0B,eAA1B,EAA2CjB,UAA3C;AACA,WAAO,MAAMV,QAAQ,CAAC4B,mBAAT,CAA6B,eAA7B,EAA8ClB,UAA9C,CAAb;AACD,GA7CQ,EA6CN,CAACV,QAAD,EAAWF,WAAX,CA7CM,CAAT;;AA+CA,QAAM+B,cAAc,GAAG,MAAM;AAC3B9B,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD,GAFD;;AAIA,QAAM+B,aAAa,GAAG,MAAM;AAC1B/B,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD,GAFD;;AAIA,SAAO,CAACH,QAAD,EAAWE,WAAX,EAAwB+B,cAAxB,EAAwCC,aAAxC,EAAuD5B,OAAvD,CAAP;AACD,CA9DD;;GAAMP,W;;AAgEN,eAAeS,eAAf,GAAiC;AAC/B,QAAM2B,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAApC,CAArB;AACA,SAAO,IAAIC,aAAJ,CAAkBL,MAAlB,EAA0BvC,OAA1B,CAAP;AACD;;AACD,eAAeG,WAAf","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst ctx = new AudioContext()\n\nvar options = {\n  audioBitsPerSecond: 16000\n}\n\nvar chunks = []\n\n\nconst useRecorder = () => {\n  const [audioURL, setAudioURL] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [recorder, setRecorder] = useState(null);\n  const [rawData, setRawData] = useState(null)\n\n  useEffect(() => {\n    // Lazily obtain recorder first time we're recording.\n    if (recorder === null) {\n      if (isRecording) {\n        requestRecorder().then(setRecorder, console.error);\n      }\n      return;\n    }\n\n    // Manage recorder state.\n    if (isRecording) {\n      recorder.start();\n    } else {\n      recorder.stop();\n    }\n\n    // Obtain the audio when ready.\n    const handleData = e => {\n    console.log(e.data)\n    const blob = new Blob([e.data]);\n    \n\n    var reader = new FileReader();\n    reader.readAsArrayBuffer(blob);\n    reader.onloadend = () => {\n      \n      let view = new Uint8Array(reader.result)\n      ctx.decodeAudioData(blob).then(function(decodedData) {\n        // use the decoded data here\n        console.log(decodedData)\n       });\n      \n      setRawData(view);\n      setAudioURL(URL.createObjectURL(e.data))//log of base64data is \"data:audio/ogg; codecs=opus;base64,GkX...\"\n    }\n    \n    }; \n      \n     // Trying to set the media type here so it matches with upload\n    \n    \n    // readyState will be 2\n\n    recorder.addEventListener(\"dataavailable\", handleData);\n    return () => recorder.removeEventListener(\"dataavailable\", handleData);\n  }, [recorder, isRecording]);\n\n  const startRecording = () => {\n    setIsRecording(true);\n  };\n\n  const stopRecording = () => {\n    setIsRecording(false);\n  };\n\n  return [audioURL, isRecording, startRecording, stopRecording, rawData];\n};\n\nasync function requestRecorder() {\n  const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n  return new MediaRecorder(stream, options);\n}\nexport default useRecorder;\n\n\n"]},"metadata":{},"sourceType":"module"}