{"ast":null,"code":"var _jsxFileName = \"/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/SoundChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Chartregisterables } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SoundChart(props) {\n  _s();\n\n  const [data, setData] = useState(props.data);\n  const [current, setCurrent] = useState();\n  const chartRef = useRef();\n  useEffect(() => {\n    const ctx = chartRef.current.getContext('2d');\n    const myChart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n        datasets: [{\n          label: '# of Votes',\n          data: [12, 19, 3, 5, 2, 3],\n          backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n    setCurrent(ctx);\n  });\n  useEffect(() => {\n    if (current) {\n      console.log(\"Updating data.\");\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"myChart\",\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SoundChart, \"VPLtGRTt2Coge6kApXBmiTHMuII=\");\n\n_c = SoundChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"SoundChart\");","map":{"version":3,"sources":["/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/SoundChart.js"],"names":["React","useState","useEffect","useRef","Chartregisterables","SoundChart","props","data","setData","current","setCurrent","chartRef","ctx","getContext","myChart","Chart","type","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,kBAAT,QAAmC,UAAnC;;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACtC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAACK,KAAK,CAACC,IAAP,CAAhC;AACA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,EAAtC;AACA,QAAMU,QAAQ,GAAGR,MAAM,EAAvB;AAEAD,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMU,GAAG,GAAGD,QAAQ,CAACF,OAAT,CAAiBI,UAAjB,CAA4B,IAA5B,CAAZ;AACA,UAAMC,OAAO,GAAG,IAAIC,KAAJ,CAAUH,GAAV,EAAe;AAC3BI,MAAAA,IAAI,EAAE,KADqB;AAE3BT,MAAAA,IAAI,EAAE;AACFU,QAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,MAAR,EAAgB,QAAhB,EAA0B,OAA1B,EAAmC,QAAnC,EAA6C,QAA7C,CADN;AAEFC,QAAAA,QAAQ,EAAE,CAAC;AACPC,UAAAA,KAAK,EAAE,YADA;AAEPZ,UAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFC;AAGPa,UAAAA,eAAe,EAAE,CACb,yBADa,EAEb,yBAFa,EAGb,yBAHa,EAIb,yBAJa,EAKb,0BALa,EAMb,yBANa,CAHV;AAWPC,UAAAA,WAAW,EAAE,CACT,uBADS,EAET,uBAFS,EAGT,uBAHS,EAIT,uBAJS,EAKT,wBALS,EAMT,uBANS,CAXN;AAmBPC,UAAAA,WAAW,EAAE;AAnBN,SAAD;AAFR,OAFqB;AA0B3BC,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE;AACJC,UAAAA,CAAC,EAAE;AACCC,YAAAA,WAAW,EAAE;AADd;AADC;AADH;AA1BkB,KAAf,CAAhB;AAkCAhB,IAAAA,UAAU,CAACE,GAAD,CAAV;AACH,GArCQ,CAAT;AAuCAV,EAAAA,SAAS,CAAC,MAAI;AACV,QAAIO,OAAJ,EAAa;AACTkB,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACH;AACJ,GAJQ,EAIP,CAACrB,IAAD,CAJO,CAAT;AAOA,sBAEI;AAAQ,IAAA,EAAE,EAAC,SAAX;AAAqB,IAAA,GAAG,EAAEI;AAA1B;AAAA;AAAA;AAAA;AAAA,UAFJ;AAKH;;GAxDuBN,U;;KAAAA,U","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { Chartregisterables } from 'chart.js'\n\nexport default function SoundChart(props) {\n    const [data, setData] = useState(props.data)\n    const [current, setCurrent] = useState()\n    const chartRef = useRef()\n\n    useEffect(()=>{\n        const ctx = chartRef.current.getContext('2d')\n        const myChart = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n                datasets: [{\n                    label: '# of Votes',\n                    data: [12, 19, 3, 5, 2, 3],\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 159, 64, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)',\n                        'rgba(255, 159, 64, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        })\n        setCurrent(ctx)\n    })\n\n    useEffect(()=>{\n        if (current) {\n            console.log(\"Updating data.\")\n        }\n    },[data])\n    \n\n    return (\n\n        <canvas id=\"myChart\" ref={chartRef}></canvas>\n    \n    )\n}\n"]},"metadata":{},"sourceType":"module"}