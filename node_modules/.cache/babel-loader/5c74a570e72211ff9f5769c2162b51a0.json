{"ast":null,"code":"import React, { useState, useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\nexport const getData = processedData => {\n  const data = processedData['data'] || [];\n  const time = data['time'];\n  const pitch = data['pitch'];\n  const pData = time.map((x, i) => ({\n    x,\n    y: pitch[i]\n  }));\n  console.log(pData);\n  return pData;\n};\n\nconst getConfig = () => {\n  const config = {\n    type: 'scatter',\n    datasets: [],\n    options: {\n      scales: {\n        x: {\n          grid: {\n            tickColor: 'red'\n          },\n          ticks: {\n            color: 'blue'\n          }\n        }\n      }\n    }\n  };\n  return config;\n};\n\nexport const createChart = parent => {\n  const chart = document.createElement('canvas');\n  chart.setAttribute(\"id\", \"Chart\");\n  parent.appendChild(chart);\n  return chart;\n};\nexport const newChart = (element, data) => {\n  var ctx = element.getContext('2d');\n  const myChart = new Chart(ctx, {\n    type: 'scatter',\n    data: {\n      datasets: [{\n        label: 'Pitch Frequency',\n        data: data,\n        borderWidth: 1,\n        backgroundColor: 'rgb(255, 99, 132)'\n      }]\n    },\n    options: {\n      scales: {\n        y: {},\n        x: {}\n      }\n    }\n  });\n  return myChart;\n};\nexport const updateChart = (chart, data) => {\n  const processedData = getData(data);\n  console.log(processedData);\n  console.log(chart);\n  chart.data.datasets.data = data;\n  chart.update();\n}; // export const updateChart = () => {\n// }\n\nexport default newChart;","map":{"version":3,"sources":["/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/SoundChart.js"],"names":["React","useState","useEffect","useRef","Chart","registerables","register","getData","processedData","data","time","pitch","pData","map","x","i","y","console","log","getConfig","config","type","datasets","options","scales","grid","tickColor","ticks","color","createChart","parent","chart","document","createElement","setAttribute","appendChild","newChart","element","ctx","getContext","myChart","label","borderWidth","backgroundColor","updateChart","update"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,UAArC;AAEAD,KAAK,CAACE,QAAN,CAAe,GAAGD,aAAlB;AAEA,OAAO,MAAME,OAAO,GAAIC,aAAD,IAAmB;AACtC,QAAMC,IAAI,GAAGD,aAAa,CAAC,MAAD,CAAb,IAAyB,EAAtC;AACA,QAAME,IAAI,GAAGD,IAAI,CAAC,MAAD,CAAjB;AACA,QAAME,KAAK,GAAGF,IAAI,CAAC,OAAD,CAAlB;AACA,QAAMG,KAAK,GAAGF,IAAI,CAACG,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,MAAW;AAAED,IAAAA,CAAF;AAAKE,IAAAA,CAAC,EAAEL,KAAK,CAACI,CAAD;AAAb,GAAX,CAAT,CAAd;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AAEA,SAAOA,KAAP;AACH,CATM;;AAYP,MAAMO,SAAS,GAAG,MAAM;AACpB,QAAMC,MAAM,GAAG;AACXC,IAAAA,IAAI,EAAE,SADK;AAEXC,IAAAA,QAAQ,EAAE,EAFC;AAGXC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE;AACNV,QAAAA,CAAC,EAAE;AACDW,UAAAA,IAAI,EAAE;AACJC,YAAAA,SAAS,EAAE;AADP,WADL;AAIDC,UAAAA,KAAK,EAAE;AACLC,YAAAA,KAAK,EAAE;AADF;AAJN;AADG;AADD;AAHE,GAAf;AAgBA,SAAOR,MAAP;AACH,CAlBD;;AAoBA,OAAO,MAAMS,WAAW,GAAIC,MAAD,IAAY;AACnC,QAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAd;AACAF,EAAAA,KAAK,CAACG,YAAN,CAAmB,IAAnB,EAAyB,OAAzB;AACAJ,EAAAA,MAAM,CAACK,WAAP,CAAmBJ,KAAnB;AACA,SAAOA,KAAP;AACH,CALM;AAOP,OAAO,MAAMK,QAAQ,GAAG,CAAEC,OAAF,EAAW5B,IAAX,KAAqB;AACzC,MAAI6B,GAAG,GAAGD,OAAO,CAACE,UAAR,CAAmB,IAAnB,CAAV;AACA,QAAMC,OAAO,GAAG,IAAIpC,KAAJ,CAAUkC,GAAV,EAAe;AACvBjB,IAAAA,IAAI,EAAE,SADiB;AAEvBZ,IAAAA,IAAI,EAAE;AACFa,MAAAA,QAAQ,EAAE,CAAC;AACPmB,QAAAA,KAAK,EAAE,iBADA;AAEPhC,QAAAA,IAAI,EAAEA,IAFC;AAGPiC,QAAAA,WAAW,EAAE,CAHN;AAIPC,QAAAA,eAAe,EAAE;AAJV,OAAD;AADR,KAFiB;AAUvBpB,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE;AACJR,QAAAA,CAAC,EAAE,EADC;AAEJF,QAAAA,CAAC,EAAE;AAFC;AADH;AAVc,GAAf,CAAhB;AAiBA,SAAO0B,OAAP;AACH,CApBM;AAsBP,OAAO,MAAMI,WAAW,GAAG,CAACb,KAAD,EAAQtB,IAAR,KAAiB;AACxC,QAAMD,aAAa,GAAGD,OAAO,CAACE,IAAD,CAA7B;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYV,aAAZ;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;AACAA,EAAAA,KAAK,CAACtB,IAAN,CAAWa,QAAX,CAAoBb,IAApB,GAA2BA,IAA3B;AACAsB,EAAAA,KAAK,CAACc,MAAN;AAEH,CAPM,C,CAUP;AAEA;;AAEA,eAAeT,QAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { Chart, registerables } from 'chart.js'\n\nChart.register(...registerables);\n\nexport const getData = (processedData) => {\n    const data = processedData['data'] || []\n    const time = data['time']\n    const pitch = data['pitch']\n    const pData = time.map((x, i) => ({ x, y: pitch[i] }))\n    \n    console.log(pData)\n    \n    return pData\n}\n\n\nconst getConfig = () => {  \n    const config = {\n        type: 'scatter',\n        datasets: [],\n        options: {\n          scales: {\n            x: {\n              grid: {\n                tickColor: 'red'\n              },\n              ticks: {\n                color: 'blue',\n              }\n            }\n          }\n        }\n      };\n    return config\n}\n\nexport const createChart = (parent) => {\n    const chart = document.createElement('canvas');\n    chart.setAttribute(\"id\", \"Chart\");\n    parent.appendChild(chart)\n    return chart\n}\n\nexport const newChart = ( element, data ) => {\n    var ctx = element.getContext('2d')\n    const myChart = new Chart(ctx, {\n            type: 'scatter',\n            data: {\n                datasets: [{\n                    label: 'Pitch Frequency',\n                    data: data,\n                    borderWidth: 1,\n                    backgroundColor: 'rgb(255, 99, 132)'\n                }]\n            },\n            options: {\n                scales: {\n                    y: { },\n                    x: { }\n                }\n            }\n        });\n    return myChart\n}\n\nexport const updateChart = (chart, data) => {\n    const processedData = getData(data)\n    console.log(processedData)\n    console.log(chart)\n    chart.data.datasets.data = data\n    chart.update()\n    \n}\n\n\n// export const updateChart = () => {\n\n// }\n\nexport default newChart\n"]},"metadata":{},"sourceType":"module"}