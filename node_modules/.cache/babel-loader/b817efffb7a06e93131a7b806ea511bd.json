{"ast":null,"code":"import React, { useState, useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\nexport const getPitchScatterData = processedData => {\n  const data = processedData['data'] || [];\n  const time = data['time'].map(function (value) {\n    return value == 0 ? NaN : value;\n  });\n  const pitch = data['pitch'];\n  const pData = time.map((x, i) => ({\n    x,\n    y: pitch[i]\n  }));\n  console.log(pData);\n  return pData;\n};\nexport const resetCanvas = (id, container_id) => {\n  document.getElementById(id).remove();\n  const newCanvas = document.createElement('canvas');\n  newCanvas.setAttribute('id', id);\n  document.getElementById(container_id).append(newCanvas);\n  return newCanvas;\n};\nexport const newPitchChart = (element, data) => {\n  var ctx = element.getContext('2d');\n  const myChart = new Chart(ctx, {\n    type: 'scatter',\n    data: {\n      datasets: [{\n        label: 'Pitch Frequency',\n        data: data,\n        borderWidth: 1,\n        backgroundColor: 'rgb(255, 99, 132)'\n      }]\n    },\n    options: {\n      scales: {\n        y: {},\n        x: {}\n      }\n    }\n  });\n  return myChart;\n};\nexport const updateChart = (chart, data) => {\n  const processedData = getPitchScatterData(data);\n  chart.data.datasets.data = data;\n  chart.update();\n};\nexport default newPitchChart;","map":{"version":3,"sources":["/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/SoundChart.js"],"names":["React","useState","useEffect","useRef","Chart","registerables","register","getPitchScatterData","processedData","data","time","map","value","NaN","pitch","pData","x","i","y","console","log","resetCanvas","id","container_id","document","getElementById","remove","newCanvas","createElement","setAttribute","append","newPitchChart","element","ctx","getContext","myChart","type","datasets","label","borderWidth","backgroundColor","options","scales","updateChart","chart","update"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,UAArC;AAEAD,KAAK,CAACE,QAAN,CAAe,GAAGD,aAAlB;AAEA,OAAO,MAAME,mBAAmB,GAAIC,aAAD,IAAmB;AAClD,QAAMC,IAAI,GAAGD,aAAa,CAAC,MAAD,CAAb,IAAyB,EAAtC;AACA,QAAME,IAAI,GAAGD,IAAI,CAAC,MAAD,CAAJ,CAAaE,GAAb,CAAiB,UAASC,KAAT,EAAgB;AAAE,WAAOA,KAAK,IAAI,CAAT,GAAaC,GAAb,GAAmBD,KAA1B;AAAkC,GAArE,CAAb;AACA,QAAME,KAAK,GAAGL,IAAI,CAAC,OAAD,CAAlB;AAEA,QAAMM,KAAK,GAAGL,IAAI,CAACC,GAAL,CAAS,CAACK,CAAD,EAAIC,CAAJ,MAAW;AAAED,IAAAA,CAAF;AAAKE,IAAAA,CAAC,EAAEJ,KAAK,CAACG,CAAD;AAAb,GAAX,CAAT,CAAd;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AAEA,SAAOA,KAAP;AACH,CAVM;AAYP,OAAO,MAAMM,WAAW,GAAG,CAACC,EAAD,EAAKC,YAAL,KAAsB;AAC7CC,EAAAA,QAAQ,CAACC,cAAT,CAAwBH,EAAxB,EAA4BI,MAA5B;AACA,QAAMC,SAAS,GAAGH,QAAQ,CAACI,aAAT,CAAuB,QAAvB,CAAlB;AACAD,EAAAA,SAAS,CAACE,YAAV,CAAuB,IAAvB,EAA6BP,EAA7B;AACAE,EAAAA,QAAQ,CAACC,cAAT,CAAwBF,YAAxB,EAAsCO,MAAtC,CAA6CH,SAA7C;AACA,SAAOA,SAAP;AACH,CANM;AAQP,OAAO,MAAMI,aAAa,GAAG,CAAEC,OAAF,EAAWvB,IAAX,KAAqB;AAC9C,MAAIwB,GAAG,GAAGD,OAAO,CAACE,UAAR,CAAmB,IAAnB,CAAV;AACA,QAAMC,OAAO,GAAG,IAAI/B,KAAJ,CAAU6B,GAAV,EAAe;AACvBG,IAAAA,IAAI,EAAE,SADiB;AAEvB3B,IAAAA,IAAI,EAAE;AACF4B,MAAAA,QAAQ,EAAE,CAAC;AACPC,QAAAA,KAAK,EAAE,iBADA;AAEP7B,QAAAA,IAAI,EAAEA,IAFC;AAGP8B,QAAAA,WAAW,EAAE,CAHN;AAIPC,QAAAA,eAAe,EAAE;AAJV,OAAD;AADR,KAFiB;AAUvBC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE;AACJxB,QAAAA,CAAC,EAAE,EADC;AAEJF,QAAAA,CAAC,EAAE;AAFC;AADH;AAVc,GAAf,CAAhB;AAiBA,SAAOmB,OAAP;AACH,CApBM;AAsBP,OAAO,MAAMQ,WAAW,GAAG,CAACC,KAAD,EAAQnC,IAAR,KAAiB;AACxC,QAAMD,aAAa,GAAGD,mBAAmB,CAACE,IAAD,CAAzC;AACAmC,EAAAA,KAAK,CAACnC,IAAN,CAAW4B,QAAX,CAAoB5B,IAApB,GAA2BA,IAA3B;AACAmC,EAAAA,KAAK,CAACC,MAAN;AACH,CAJM;AAMP,eAAed,aAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { Chart, registerables } from 'chart.js'\n\nChart.register(...registerables);\n\nexport const getPitchScatterData = (processedData) => {\n    const data = processedData['data'] || []\n    const time = data['time'].map(function(value) { return value == 0 ? NaN : value; })\n    const pitch = data['pitch']\n    \n    const pData = time.map((x, i) => ({ x, y: pitch[i] }))\n    \n    console.log(pData)\n    \n    return pData\n}\n\nexport const resetCanvas = (id, container_id) => {\n    document.getElementById(id).remove()\n    const newCanvas = document.createElement('canvas')\n    newCanvas.setAttribute('id', id)\n    document.getElementById(container_id).append(newCanvas)\n    return newCanvas\n}\n\nexport const newPitchChart = ( element, data ) => {\n    var ctx = element.getContext('2d')\n    const myChart = new Chart(ctx, {\n            type: 'scatter',\n            data: {\n                datasets: [{\n                    label: 'Pitch Frequency',\n                    data: data,\n                    borderWidth: 1,\n                    backgroundColor: 'rgb(255, 99, 132)'\n                }]\n            },\n            options: {\n                scales: {\n                    y: { },\n                    x: { }\n                }\n            }\n        });\n    return myChart\n}\n\nexport const updateChart = (chart, data) => {\n    const processedData = getPitchScatterData(data)\n    chart.data.datasets.data = data\n    chart.update()\n}\n\nexport default newPitchChart\n"]},"metadata":{},"sourceType":"module"}