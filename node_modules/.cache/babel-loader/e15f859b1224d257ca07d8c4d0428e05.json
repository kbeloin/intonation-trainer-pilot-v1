{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\n\nconst useRecorder = () => {\n  _s();\n\n  const [audioURL, setAudioURL] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [recorder, setRecorder] = useState(null);\n  const [rawData, setRawData] = useState(null);\n  useEffect(() => {\n    // Lazily obtain recorder first time we're recording.\n    if (recorder === null) {\n      if (isRecording) {\n        requestRecorder().then(setRecorder, console.error);\n      }\n\n      return;\n    } // Manage recorder state.\n\n\n    if (isRecording) {\n      recorder.start();\n    } else {\n      recorder.stop();\n    } // Obtain the audio when ready.\n\n\n    const handleData = e => {\n      const arr = e.data;\n      const reader = new FileReader();\n      reader.addEventListener('loadend', () => {\n        setRawData(reader.result);\n      });\n      reader.readAsArrayBuffer(arr);\n      setAudioURL(URL.createObjectURL(e.data)); // readyState will be 2\n    };\n\n    recorder.addEventListener(\"dataavailable\", handleData);\n    return () => recorder.removeEventListener(\"dataavailable\", handleData);\n  }, [recorder, isRecording]);\n\n  const startRecording = () => {\n    setIsRecording(true);\n  };\n\n  const stopRecording = () => {\n    setIsRecording(false);\n  };\n\n  return [audioURL, isRecording, startRecording, stopRecording, rawData];\n};\n\n_s(useRecorder, \"/t57FCeX2vt5NX2vpkjGLb89s9w=\");\n\nasync function requestRecorder() {\n  const stream = await navigator.mediaDevices.getUserMedia({\n    audio: true\n  });\n  return new MediaRecorder(stream);\n}\n\nexport default useRecorder;","map":{"version":3,"sources":["/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/useRecorder.js"],"names":["useEffect","useState","useRecorder","audioURL","setAudioURL","isRecording","setIsRecording","recorder","setRecorder","rawData","setRawData","requestRecorder","then","console","error","start","stop","handleData","e","arr","data","reader","FileReader","addEventListener","result","readAsArrayBuffer","URL","createObjectURL","removeEventListener","startRecording","stopRecording","stream","navigator","mediaDevices","getUserMedia","audio","MediaRecorder"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIO,QAAQ,KAAK,IAAjB,EAAuB;AACrB,UAAIF,WAAJ,EAAiB;AACfM,QAAAA,eAAe,GAAGC,IAAlB,CAAuBJ,WAAvB,EAAoCK,OAAO,CAACC,KAA5C;AACD;;AACD;AACD,KAPa,CASd;;;AACA,QAAIT,WAAJ,EAAiB;AACfE,MAAAA,QAAQ,CAACQ,KAAT;AACD,KAFD,MAEO;AACLR,MAAAA,QAAQ,CAACS,IAAT;AACD,KAda,CAgBd;;;AACA,UAAMC,UAAU,GAAGC,CAAC,IAAI;AACxB,YAAMC,GAAG,GAAGD,CAAC,CAACE,IAAd;AACA,YAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;AAEAD,MAAAA,MAAM,CAACE,gBAAP,CAAwB,SAAxB,EAAmC,MAAM;AACvCb,QAAAA,UAAU,CAACW,MAAM,CAACG,MAAR,CAAV;AACD,OAFD;AAIAH,MAAAA,MAAM,CAACI,iBAAP,CAAyBN,GAAzB;AAEAf,MAAAA,WAAW,CAACsB,GAAG,CAACC,eAAJ,CAAoBT,CAAC,CAACE,IAAtB,CAAD,CAAX,CAVwB,CAUkB;AACzC,KAXD;;AAaAb,IAAAA,QAAQ,CAACgB,gBAAT,CAA0B,eAA1B,EAA2CN,UAA3C;AACA,WAAO,MAAMV,QAAQ,CAACqB,mBAAT,CAA6B,eAA7B,EAA8CX,UAA9C,CAAb;AACD,GAhCQ,EAgCN,CAACV,QAAD,EAAWF,WAAX,CAhCM,CAAT;;AAkCA,QAAMwB,cAAc,GAAG,MAAM;AAC3BvB,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD,GAFD;;AAIA,QAAMwB,aAAa,GAAG,MAAM;AAC1BxB,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD,GAFD;;AAIA,SAAO,CAACH,QAAD,EAAWE,WAAX,EAAwBwB,cAAxB,EAAwCC,aAAxC,EAAuDrB,OAAvD,CAAP;AACD,CAjDD;;GAAMP,W;;AAmDN,eAAeS,eAAf,GAAiC;AAC/B,QAAMoB,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAApC,CAArB;AACA,SAAO,IAAIC,aAAJ,CAAkBL,MAAlB,CAAP;AACD;;AACD,eAAe7B,WAAf","sourcesContent":["import { useEffect, useState } from \"react\";\n\nconst useRecorder = () => {\n  const [audioURL, setAudioURL] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [recorder, setRecorder] = useState(null);\n  const [rawData, setRawData] = useState(null)\n\n  useEffect(() => {\n    // Lazily obtain recorder first time we're recording.\n    if (recorder === null) {\n      if (isRecording) {\n        requestRecorder().then(setRecorder, console.error);\n      }\n      return;\n    }\n\n    // Manage recorder state.\n    if (isRecording) {\n      recorder.start();\n    } else {\n      recorder.stop();\n    }\n\n    // Obtain the audio when ready.\n    const handleData = e => {\n    const arr = e.data\n    const reader = new FileReader();\n    \n    reader.addEventListener('loadend', () => {\n      setRawData(reader.result);\n    });\n\n    reader.readAsArrayBuffer(arr);\n    \n    setAudioURL(URL.createObjectURL(e.data)); // readyState will be 2\n    };\n\n    recorder.addEventListener(\"dataavailable\", handleData);\n    return () => recorder.removeEventListener(\"dataavailable\", handleData);\n  }, [recorder, isRecording]);\n\n  const startRecording = () => {\n    setIsRecording(true);\n  };\n\n  const stopRecording = () => {\n    setIsRecording(false);\n  };\n\n  return [audioURL, isRecording, startRecording, stopRecording, rawData];\n};\n\nasync function requestRecorder() {\n  const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n  return new MediaRecorder(stream);\n}\nexport default useRecorder;\n\n\n"]},"metadata":{},"sourceType":"module"}