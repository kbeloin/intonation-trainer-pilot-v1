{"ast":null,"code":"var _jsxFileName = \"/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/SoundChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\n\nconst skipped = (ctx, value) => ctx.p0.skip || ctx.p1.skip ? value : undefined;\n\nconst down = (ctx, value) => ctx.p0.parsed.y > ctx.p1.parsed.y ? value : undefined;\n\nexport const getPitchScatterData = processedData => {\n  let data = processedData['x_y'] || [];\n\n  for (let i = 0; i < data.length; i++) {\n    if (data[i]['x'] === 0) {\n      data[i]['x'] = NaN;\n    }\n\n    if (data[i]['y'] === 0) {\n      data[i]['y'] = NaN;\n    }\n  }\n\n  return data;\n};\nexport const resetCanvas = (id, container_id, chart) => {\n  chart.destroy();\n  document.getElementById(id).remove();\n  const newCanvas = document.createElement('canvas');\n  newCanvas.setAttribute('id', id);\n  document.getElementById(container_id).append(newCanvas);\n  newCanvas.append('Loading');\n  return newCanvas;\n};\nexport const PitchChart = data => {\n  _s();\n\n  let chartRef = useRef();\n  console.log(data);\n  useEffect(() => {\n    let ctx = chartRef.current.getContext('2d');\n    let myChart = new Chart(ctx, {\n      type: 'scatter',\n      data: {\n        datasets: [{\n          label: 'Pitch Frequency',\n          data: data,\n          borderWidth: 1,\n          backgroundColor: 'rgb(255, 99, 132)'\n        }]\n      },\n      options: {\n        scales: {\n          y: {},\n          x: {}\n        }\n      }\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"question-data\",\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PitchChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n\n_c = PitchChart;\nexport const updateChart = (chart, data) => {\n  const processedData = getPitchScatterData(data);\n  chart.data.datasets.data = data;\n  chart.update();\n};\nexport default PitchChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"PitchChart\");","map":{"version":3,"sources":["/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/SoundChart.js"],"names":["React","useState","useEffect","useRef","Chart","registerables","register","skipped","ctx","value","p0","skip","p1","undefined","down","parsed","y","getPitchScatterData","processedData","data","i","length","NaN","resetCanvas","id","container_id","chart","destroy","document","getElementById","remove","newCanvas","createElement","setAttribute","append","PitchChart","chartRef","console","log","current","getContext","myChart","type","datasets","label","borderWidth","backgroundColor","options","scales","x","updateChart","update"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { Chart, registerables } from 'chart.js'\n\nChart.register(...registerables);\n\nconst skipped = (ctx, value) => ctx.p0.skip || ctx.p1.skip ? value : undefined;\nconst down = (ctx, value) => ctx.p0.parsed.y > ctx.p1.parsed.y ? value : undefined;\n\nexport const getPitchScatterData = (processedData) => {\n    \n    let data = processedData['x_y'] || []\n    for (let i = 0; i < data.length; i++) {\n        if (data[i]['x'] === 0) {\n            data[i]['x'] = NaN;\n        }\n        if (data[i]['y'] === 0) {\n            data[i]['y'] = NaN;\n        }\n      }\n\n    return data\n}\n\nexport const resetCanvas = (id, container_id, chart) => {\n    chart.destroy()\n    document.getElementById(id).remove()\n    const newCanvas = document.createElement('canvas')\n    newCanvas.setAttribute('id', id)\n    document.getElementById(container_id).append(newCanvas)\n    newCanvas.append('Loading')\n    return newCanvas\n}\n\nexport const PitchChart = ( data ) => {\n    let chartRef = useRef()\n    console.log(data)\n    useEffect(() => {\n        let ctx = chartRef.current.getContext('2d')\n    \n        let myChart = new Chart(ctx, {\n            type: 'scatter',\n            data: {\n                datasets: [{\n                    label: 'Pitch Frequency',\n                    data: data,\n                    borderWidth: 1,\n                    backgroundColor: 'rgb(255, 99, 132)'\n                    }]\n                },\n                options: {\n                    scales: {\n                        y: { },\n                        x: { }\n                    }\n                }\n            });\n        },\n        \n        )\n\n    return (\n        <canvas id=\"question-data\" ref={chartRef}></canvas>\n    )\n}\n\nexport const updateChart = (chart, data) => {\n    const processedData = getPitchScatterData(data)\n    chart.data.datasets.data = data\n    chart.update()\n}\n\nexport default PitchChart\n"]},"metadata":{},"sourceType":"module"}