{"ast":null,"code":"import { getCSRF } from './csrfHelper.js';\nexport const processAudioData = async data => {\n  // Expects an array buffer, and returns converted pitch data. \n  var xhr = new XMLHttpRequest();\n  xhr.open(\"POST\", \"/api/process/\", true);\n  xhr.setRequestHeader(\"X-CSRFToken\", getCSRF()); //Send the proper header information along with the request\n\n  xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\n\n  xhr.onreadystatechange = function () {\n    // Call a function when the state changes.\n    if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {\n      var response = JSON.parse(xhr.responseText);\n      return response;\n    }\n  };\n\n  var p3 = new Promise((resolve, reject) => {\n    resolve(xhr.send(JSON.stringify(data)));\n  });\n};","map":{"version":3,"sources":["/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/utils/processAudio.js"],"names":["getCSRF","processAudioData","data","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","DONE","status","response","JSON","parse","responseText","p3","Promise","resolve","reject","send","stringify"],"mappings":"AAAA,SAASA,OAAT,QAAwB,iBAAxB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,IAAP,IAAgB;AAC5C;AACA,MAAIC,GAAG,GAAG,IAAIC,cAAJ,EAAV;AACAD,EAAAA,GAAG,CAACE,IAAJ,CAAS,MAAT,EAAiB,eAAjB,EAAkC,IAAlC;AACAF,EAAAA,GAAG,CAACG,gBAAJ,CAAqB,aAArB,EAAoCN,OAAO,EAA3C,EAJ4C,CAK5C;;AACAG,EAAAA,GAAG,CAACG,gBAAJ,CAAqB,cAArB,EAAqC,0BAArC;;AAEAH,EAAAA,GAAG,CAACI,kBAAJ,GAAyB,YAAW;AAAE;AAClC,QAAI,KAAKC,UAAL,KAAoBJ,cAAc,CAACK,IAAnC,IAA2C,KAAKC,MAAL,KAAgB,GAA/D,EAAoE;AAChE,UAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWV,GAAG,CAACW,YAAf,CAAf;AACA,aAAOH,QAAP;AACH;AACJ,GALD;;AAMA,MAAII,EAAE,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCD,IAAAA,OAAO,CAACd,GAAG,CAACgB,IAAJ,CAASP,IAAI,CAACQ,SAAL,CAAelB,IAAf,CAAT,CAAD,CAAP;AACD,GAFM,CAAT;AAIH,CAlBM","sourcesContent":["import { getCSRF } from './csrfHelper.js'\n\nexport const processAudioData = async (data) => {\n    // Expects an array buffer, and returns converted pitch data. \n    var xhr = new XMLHttpRequest()\n    xhr.open(\"POST\", \"/api/process/\", true);\n    xhr.setRequestHeader(\"X-CSRFToken\", getCSRF()); \n    //Send the proper header information along with the request\n    xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\n    \n    xhr.onreadystatechange = function() { // Call a function when the state changes.\n        if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {\n            var response = JSON.parse(xhr.responseText);\n            return response\n        }\n    }  \n    var p3 = new Promise((resolve, reject) => {\n        resolve(xhr.send(JSON.stringify(data)))\n      });\n    \n}"]},"metadata":{},"sourceType":"module"}