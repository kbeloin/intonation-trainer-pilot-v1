{"ast":null,"code":"import React, { useState, useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\n\nconst getData = processedData => {\n  const time = processedData['time'];\n  const pitch = processedData['pitch'];\n\n  datasets: [{\n    label: 'Pitch Dataset',\n    data: time.map((x, i) => ({\n      x,\n      y: pitch[i]\n    })),\n    backgroundColor: 'rgb(255, 99, 132)'\n  }];\n\n  return datasets;\n};\n\nconst getConfig = data => {\n  const config = {\n    type: 'scatter',\n    data: data,\n    options: {\n      scales: {\n        x: {\n          type: 'linear',\n          position: 'bottom'\n        }\n      }\n    }\n  };\n  return config;\n};\n\nexport const createChart = parent => {\n  const chart = document.createElement('canvas');\n  chart.setAttribute(\"id\", \"Chart\");\n  parent.appendChild(chart);\n  return chart;\n};\nexport const updateChart = ({\n  parent,\n  data\n}) => {\n  const chartElement = createChart(parent);\n  const processedData = getData(data);\n  const config = getConfig(processedData);\n  var myChart = new Chart(chartElement, config);\n  \"\";\n  return;\n};\n\nconst newChart = parent => {\n  if (!parent.firstChild) {\n    const chart = createChart(parent);\n  }\n\n  const oldChart = parent.firstChild;\n  parent.removeChild(oldChart);\n  const newChart = createChart(parent);\n}; // export const updateChart = () => {\n// }\n\n\nexport default newChart;","map":{"version":3,"sources":["/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/SoundChart.js"],"names":["React","useState","useEffect","useRef","Chart","registerables","register","getData","processedData","time","pitch","datasets","label","data","map","x","i","y","backgroundColor","getConfig","config","type","options","scales","position","createChart","parent","chart","document","createElement","setAttribute","appendChild","updateChart","chartElement","myChart","newChart","firstChild","oldChart","removeChild"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,UAArC;AAEAD,KAAK,CAACE,QAAN,CAAe,GAAGD,aAAlB;;AAEA,MAAME,OAAO,GAAIC,aAAD,IAAmB;AAC/B,QAAMC,IAAI,GAAGD,aAAa,CAAC,MAAD,CAA1B;AACA,QAAME,KAAK,GAAGF,aAAa,CAAC,OAAD,CAA3B;;AAEAG,EAAAA,QAAQ,EAAE,CAAC;AACTC,IAAAA,KAAK,EAAE,eADE;AAETC,IAAAA,IAAI,EAAEJ,IAAI,CAACK,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,MAAW;AAAED,MAAAA,CAAF;AAAKE,MAAAA,CAAC,EAAEP,KAAK,CAACM,CAAD;AAAb,KAAX,CAAT,CAFG;AAGTE,IAAAA,eAAe,EAAE;AAHR,GAAD;;AAKV,SAAOP,QAAP;AAED,CAXH;;AAaA,MAAMQ,SAAS,GAAIN,IAAD,IAAU;AACxB,QAAMO,MAAM,GAAG;AACXC,IAAAA,IAAI,EAAE,SADK;AAEXR,IAAAA,IAAI,EAAEA,IAFK;AAGXS,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE;AACNR,QAAAA,CAAC,EAAE;AACDM,UAAAA,IAAI,EAAE,QADL;AAEDG,UAAAA,QAAQ,EAAE;AAFT;AADG;AADD;AAHE,GAAf;AAYA,SAAOJ,MAAP;AACH,CAdD;;AAgBA,OAAO,MAAMK,WAAW,GAAIC,MAAD,IAAY;AACnC,QAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAd;AACAF,EAAAA,KAAK,CAACG,YAAN,CAAmB,IAAnB,EAAyB,OAAzB;AACAJ,EAAAA,MAAM,CAACK,WAAP,CAAmBJ,KAAnB;AACA,SAAOA,KAAP;AACH,CALM;AAOP,OAAO,MAAMK,WAAW,GAAG,CAAC;AAACN,EAAAA,MAAD;AAASb,EAAAA;AAAT,CAAD,KAAoB;AAC3C,QAAMoB,YAAY,GAAGR,WAAW,CAACC,MAAD,CAAhC;AACA,QAAMlB,aAAa,GAAGD,OAAO,CAACM,IAAD,CAA7B;AACA,QAAMO,MAAM,GAAGD,SAAS,CAACX,aAAD,CAAxB;AAEA,MAAI0B,OAAO,GAAG,IAAI9B,KAAJ,CACV6B,YADU,EAEVb,MAFU,CAAd;AAIA;AACA;AACH,CAXM;;AAaP,MAAMe,QAAQ,GAAIT,MAAD,IAAY;AACzB,MAAI,CAACA,MAAM,CAACU,UAAZ,EAAwB;AACpB,UAAMT,KAAK,GAAGF,WAAW,CAACC,MAAD,CAAzB;AACH;;AACD,QAAMW,QAAQ,GAAGX,MAAM,CAACU,UAAxB;AACAV,EAAAA,MAAM,CAACY,WAAP,CAAmBD,QAAnB;AACA,QAAMF,QAAQ,GAAGV,WAAW,CAACC,MAAD,CAA5B;AACH,CAPD,C,CAWA;AAEA;;;AAEA,eAAeS,QAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { Chart, registerables } from 'chart.js'\n\nChart.register(...registerables);\n\nconst getData = (processedData) => {\n    const time = processedData['time']\n    const pitch = processedData['pitch']\n\n    datasets: [{\n      label: 'Pitch Dataset',\n      data: time.map((x, i) => ({ x, y: pitch[i] })),\n      backgroundColor: 'rgb(255, 99, 132)'\n    }]\n    return datasets\n\n  };\n\nconst getConfig = (data) => {  \n    const config = {\n        type: 'scatter',\n        data: data,\n        options: {\n          scales: {\n            x: {\n              type: 'linear',\n              position: 'bottom'\n            }\n          }\n        }\n      };\n    return config\n}\n\nexport const createChart = (parent) => {\n    const chart = document.createElement('canvas');\n    chart.setAttribute(\"id\", \"Chart\");\n    parent.appendChild(chart)\n    return chart\n}\n\nexport const updateChart = ({parent, data}) => {\n    const chartElement = createChart(parent)\n    const processedData = getData(data)\n    const config = getConfig(processedData)\n\n    var myChart = new Chart(\n        chartElement,\n        config\n    );\n    \"\"\n    return \n}\n\nconst newChart = (parent) => {\n    if (!parent.firstChild) {\n        const chart = createChart(parent)\n    }\n    const oldChart = parent.firstChild\n    parent.removeChild(oldChart)\n    const newChart = createChart(parent)\n}\n\n\n\n// export const updateChart = () => {\n\n// }\n\nexport default newChart\n"]},"metadata":{},"sourceType":"module"}