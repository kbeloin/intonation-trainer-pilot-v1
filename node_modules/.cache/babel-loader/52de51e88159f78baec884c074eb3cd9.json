{"ast":null,"code":"import _toConsumableArray from\"/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import React,{useState,useEffect,useRef}from'react';import{Chart,registerables}from'chart.js';Chart.register.apply(Chart,_toConsumableArray(registerables));var skipped=function skipped(ctx,value){return ctx.p0.skip||ctx.p1.skip?value:undefined;};var down=function down(ctx,value){return ctx.p0.parsed.y>ctx.p1.parsed.y?value:undefined;};export var getPitchScatterData=function getPitchScatterData(processedData){var data=processedData['data']||[];var time=data['time'].map(function(value){return value==0?NaN:value;});var pitch=data['pitch'].map(function(value){return value==0?NaN:value;});var pData=time.map(function(x,i){return{x:x,y:pitch[i]};});console.log(pData);return pData;};export var resetCanvas=function resetCanvas(id,container_id){document.getElementById(id).remove();var newCanvas=document.createElement('canvas');newCanvas.setAttribute('id',id);document.getElementById(container_id).append(newCanvas);return newCanvas;};export var newPitchChart=function newPitchChart(element,data){var ctx=element.getContext('2d');var myChart=new Chart(ctx,{type:'scatter',data:{datasets:[{label:'Pitch Frequency',data:data,borderWidth:1,backgroundColor:'rgb(255, 99, 132)'}]},options:{scales:{y:{},x:{}}}});return myChart;};export var updateChart=function updateChart(chart,data){var processedData=getPitchScatterData(data);chart.data.datasets.data=data;chart.update();};export default newPitchChart;","map":{"version":3,"sources":["/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/SoundChart.js"],"names":["React","useState","useEffect","useRef","Chart","registerables","register","skipped","ctx","value","p0","skip","p1","undefined","down","parsed","y","getPitchScatterData","processedData","data","time","map","NaN","pitch","pData","x","i","console","log","resetCanvas","id","container_id","document","getElementById","remove","newCanvas","createElement","setAttribute","append","newPitchChart","element","getContext","myChart","type","datasets","label","borderWidth","backgroundColor","options","scales","updateChart","chart","update"],"mappings":"8LAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,CAAqCC,MAArC,KAAmD,OAAnD,CACA,OAASC,KAAT,CAAgBC,aAAhB,KAAqC,UAArC,CAEAD,KAAK,CAACE,QAAN,OAAAF,KAAK,oBAAaC,aAAb,EAAL,CAEA,GAAME,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,GAAD,CAAMC,KAAN,QAAgBD,CAAAA,GAAG,CAACE,EAAJ,CAAOC,IAAP,EAAeH,GAAG,CAACI,EAAJ,CAAOD,IAAtB,CAA6BF,KAA7B,CAAqCI,SAArD,EAAhB,CACA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAACN,GAAD,CAAMC,KAAN,QAAgBD,CAAAA,GAAG,CAACE,EAAJ,CAAOK,MAAP,CAAcC,CAAd,CAAkBR,GAAG,CAACI,EAAJ,CAAOG,MAAP,CAAcC,CAAhC,CAAoCP,KAApC,CAA4CI,SAA5D,EAAb,CAEA,MAAO,IAAMI,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,aAAD,CAAmB,CAElD,GAAMC,CAAAA,IAAI,CAAGD,aAAa,CAAC,MAAD,CAAb,EAAyB,EAAtC,CACA,GAAME,CAAAA,IAAI,CAAGD,IAAI,CAAC,MAAD,CAAJ,CAAaE,GAAb,CAAiB,SAASZ,KAAT,CAAgB,CAAE,MAAOA,CAAAA,KAAK,EAAI,CAAT,CAAaa,GAAb,CAAmBb,KAA1B,CAAkC,CAArE,CAAb,CACA,GAAMc,CAAAA,KAAK,CAAGJ,IAAI,CAAC,OAAD,CAAJ,CAAcE,GAAd,CAAkB,SAASZ,KAAT,CAAgB,CAAE,MAAOA,CAAAA,KAAK,EAAI,CAAT,CAAaa,GAAb,CAAmBb,KAA1B,CAAkC,CAAtE,CAAd,CAEA,GAAMe,CAAAA,KAAK,CAAGJ,IAAI,CAACC,GAAL,CAAS,SAACI,CAAD,CAAIC,CAAJ,QAAW,CAAED,CAAC,CAADA,CAAF,CAAKT,CAAC,CAAEO,KAAK,CAACG,CAAD,CAAb,CAAX,EAAT,CAAd,CAEAC,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAEA,MAAOA,CAAAA,KAAP,CACH,CAXM,CAaP,MAAO,IAAMK,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,EAAD,CAAKC,YAAL,CAAsB,CAC7CC,QAAQ,CAACC,cAAT,CAAwBH,EAAxB,EAA4BI,MAA5B,GACA,GAAMC,CAAAA,SAAS,CAAGH,QAAQ,CAACI,aAAT,CAAuB,QAAvB,CAAlB,CACAD,SAAS,CAACE,YAAV,CAAuB,IAAvB,CAA6BP,EAA7B,EACAE,QAAQ,CAACC,cAAT,CAAwBF,YAAxB,EAAsCO,MAAtC,CAA6CH,SAA7C,EACA,MAAOA,CAAAA,SAAP,CACH,CANM,CAQP,MAAO,IAAMI,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAAEC,OAAF,CAAWrB,IAAX,CAAqB,CAC9C,GAAIX,CAAAA,GAAG,CAAGgC,OAAO,CAACC,UAAR,CAAmB,IAAnB,CAAV,CACA,GAAMC,CAAAA,OAAO,CAAG,GAAItC,CAAAA,KAAJ,CAAUI,GAAV,CAAe,CACvBmC,IAAI,CAAE,SADiB,CAEvBxB,IAAI,CAAE,CACFyB,QAAQ,CAAE,CAAC,CACPC,KAAK,CAAE,iBADA,CAEP1B,IAAI,CAAEA,IAFC,CAGP2B,WAAW,CAAE,CAHN,CAIPC,eAAe,CAAE,mBAJV,CAAD,CADR,CAFiB,CAUvBC,OAAO,CAAE,CACLC,MAAM,CAAE,CACJjC,CAAC,CAAE,EADC,CAEJS,CAAC,CAAE,EAFC,CADH,CAVc,CAAf,CAAhB,CAiBA,MAAOiB,CAAAA,OAAP,CACH,CApBM,CAsBP,MAAO,IAAMQ,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAQhC,IAAR,CAAiB,CACxC,GAAMD,CAAAA,aAAa,CAAGD,mBAAmB,CAACE,IAAD,CAAzC,CACAgC,KAAK,CAAChC,IAAN,CAAWyB,QAAX,CAAoBzB,IAApB,CAA2BA,IAA3B,CACAgC,KAAK,CAACC,MAAN,GACH,CAJM,CAMP,cAAeb,CAAAA,aAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { Chart, registerables } from 'chart.js'\n\nChart.register(...registerables);\n\nconst skipped = (ctx, value) => ctx.p0.skip || ctx.p1.skip ? value : undefined;\nconst down = (ctx, value) => ctx.p0.parsed.y > ctx.p1.parsed.y ? value : undefined;\n\nexport const getPitchScatterData = (processedData) => {\n    \n    const data = processedData['data'] || []\n    const time = data['time'].map(function(value) { return value == 0 ? NaN : value; })\n    const pitch = data['pitch'].map(function(value) { return value == 0 ? NaN : value; })\n    \n    const pData = time.map((x, i) => ({ x, y: pitch[i] }))\n    \n    console.log(pData)\n    \n    return pData\n}\n\nexport const resetCanvas = (id, container_id) => {\n    document.getElementById(id).remove()\n    const newCanvas = document.createElement('canvas')\n    newCanvas.setAttribute('id', id)\n    document.getElementById(container_id).append(newCanvas)\n    return newCanvas\n}\n\nexport const newPitchChart = ( element, data ) => {\n    var ctx = element.getContext('2d')\n    const myChart = new Chart(ctx, {\n            type: 'scatter',\n            data: {\n                datasets: [{\n                    label: 'Pitch Frequency',\n                    data: data,\n                    borderWidth: 1,\n                    backgroundColor: 'rgb(255, 99, 132)'\n                }]\n            },\n            options: {\n                scales: {\n                    y: { },\n                    x: { }\n                }\n            }\n        });\n    return myChart\n}\n\nexport const updateChart = (chart, data) => {\n    const processedData = getPitchScatterData(data)\n    chart.data.datasets.data = data\n    chart.update()\n}\n\nexport default newPitchChart\n"]},"metadata":{},"sourceType":"module"}