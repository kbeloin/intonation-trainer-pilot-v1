{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nvar options = {\n  audioBitsPerSecond: 16000\n};\nvar chunks = [];\n\nconst useRecorder = () => {\n  _s();\n\n  const [audioURL, setAudioURL] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [recorder, setRecorder] = useState(null);\n  const [rawData, setRawData] = useState(null);\n  useEffect(() => {\n    // Lazily obtain recorder first time we're recording.\n    if (recorder === null) {\n      if (isRecording) {\n        requestRecorder().then(setRecorder, console.error);\n      }\n\n      return;\n    } // Manage recorder state.\n\n\n    if (isRecording) {\n      recorder.start();\n    } else {\n      recorder.stop();\n    } // Obtain the audio when ready.\n\n\n    const handleData = e => {\n      // const blob = new Blob([e.data]);\n      let ctx = new AudioContext();\n      let reader = new FileReader();\n      reader.readAsArrayBuffer(e.data);\n\n      reader.onloadend = () => {\n        ctx.decodeAudioData(reader.result).then(function (decodedData) {\n          const view = decodedData.getChannelData(0); //\n\n          setRawData(view); // This might be done by \n\n          setAudioURL(URL.createObjectURL(e.data)); //log of base64data is \"data:audio/ogg; codecs=opus;base64,GkX...\"\n        });\n      };\n    };\n\n    recorder.addEventListener(\"dataavailable\", handleData);\n    return () => recorder.removeEventListener(\"dataavailable\", handleData);\n  }, [recorder, isRecording]);\n\n  const startRecording = () => {\n    setIsRecording(true);\n  };\n\n  const stopRecording = () => {\n    setIsRecording(false);\n  };\n\n  return [audioURL, isRecording, startRecording, stopRecording, rawData];\n};\n\n_s(useRecorder, \"/t57FCeX2vt5NX2vpkjGLb89s9w=\");\n\nasync function requestRecorder() {\n  const stream = await navigator.mediaDevices.getUserMedia({\n    audio: true\n  });\n  return new MediaRecorder(stream, options);\n}\n\nexport default useRecorder;","map":{"version":3,"sources":["/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/utils/useRecorder.js"],"names":["useEffect","useState","options","audioBitsPerSecond","chunks","useRecorder","audioURL","setAudioURL","isRecording","setIsRecording","recorder","setRecorder","rawData","setRawData","requestRecorder","then","console","error","start","stop","handleData","e","ctx","AudioContext","reader","FileReader","readAsArrayBuffer","data","onloadend","decodeAudioData","result","decodedData","view","getChannelData","URL","createObjectURL","addEventListener","removeEventListener","startRecording","stopRecording","stream","navigator","mediaDevices","getUserMedia","audio","MediaRecorder"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAIA,IAAIC,OAAO,GAAG;AACZC,EAAAA,kBAAkB,EAAE;AADR,CAAd;AAIA,IAAIC,MAAM,GAAG,EAAb;;AAGA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIU,QAAQ,KAAK,IAAjB,EAAuB;AACrB,UAAIF,WAAJ,EAAiB;AACfM,QAAAA,eAAe,GAAGC,IAAlB,CAAuBJ,WAAvB,EAAoCK,OAAO,CAACC,KAA5C;AACD;;AACD;AACD,KAPa,CASd;;;AACA,QAAIT,WAAJ,EAAiB;AACfE,MAAAA,QAAQ,CAACQ,KAAT;AACD,KAFD,MAEO;AACLR,MAAAA,QAAQ,CAACS,IAAT;AACD,KAda,CAgBd;;;AACA,UAAMC,UAAU,GAAGC,CAAC,IAAI;AACtB;AACA,UAAIC,GAAG,GAAG,IAAIC,YAAJ,EAAV;AACA,UAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;AAEAD,MAAAA,MAAM,CAACE,iBAAP,CAAyBL,CAAC,CAACM,IAA3B;;AACAH,MAAAA,MAAM,CAACI,SAAP,GAAmB,MAAM;AACvBN,QAAAA,GAAG,CAACO,eAAJ,CAAoBL,MAAM,CAACM,MAA3B,EAAmCf,IAAnC,CAAwC,UAASgB,WAAT,EAAsB;AAC5D,gBAAMC,IAAI,GAAGD,WAAW,CAACE,cAAZ,CAA2B,CAA3B,CAAb,CAD4D,CACjB;;AAC3CpB,UAAAA,UAAU,CAACmB,IAAD,CAAV,CAF4D,CAE1C;;AAClBzB,UAAAA,WAAW,CAAC2B,GAAG,CAACC,eAAJ,CAAoBd,CAAC,CAACM,IAAtB,CAAD,CAAX,CAH4D,CAGpB;AAC1C,SAJA;AAKH,OANC;AAOD,KAbD;;AAeAjB,IAAAA,QAAQ,CAAC0B,gBAAT,CAA0B,eAA1B,EAA2ChB,UAA3C;AACA,WAAO,MAAMV,QAAQ,CAAC2B,mBAAT,CAA6B,eAA7B,EAA8CjB,UAA9C,CAAb;AACD,GAlCQ,EAkCN,CAACV,QAAD,EAAWF,WAAX,CAlCM,CAAT;;AAoCA,QAAM8B,cAAc,GAAG,MAAM;AAC3B7B,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD,GAFD;;AAIA,QAAM8B,aAAa,GAAG,MAAM;AAC1B9B,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD,GAFD;;AAIA,SAAO,CAACH,QAAD,EAAWE,WAAX,EAAwB8B,cAAxB,EAAwCC,aAAxC,EAAuD3B,OAAvD,CAAP;AACD,CApDD;;GAAMP,W;;AAsDN,eAAeS,eAAf,GAAiC;AAC/B,QAAM0B,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAApC,CAArB;AACA,SAAO,IAAIC,aAAJ,CAAkBL,MAAlB,EAA0BtC,OAA1B,CAAP;AACD;;AACD,eAAeG,WAAf","sourcesContent":["import { useEffect, useState } from \"react\";\n\n\n\nvar options = {\n  audioBitsPerSecond: 16000\n}\n\nvar chunks = []\n\n\nconst useRecorder = () => {\n  const [audioURL, setAudioURL] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [recorder, setRecorder] = useState(null);\n  const [rawData, setRawData] = useState(null)\n  \n\n  useEffect(() => {\n    // Lazily obtain recorder first time we're recording.\n    if (recorder === null) {\n      if (isRecording) {\n        requestRecorder().then(setRecorder, console.error);\n      }\n      return;\n    }\n\n    // Manage recorder state.\n    if (isRecording) {\n      recorder.start();\n    } else {\n      recorder.stop();\n    }\n\n    // Obtain the audio when ready.\n    const handleData = e => {\n      // const blob = new Blob([e.data]);\n      let ctx = new AudioContext();\n      let reader = new FileReader();\n\n      reader.readAsArrayBuffer(e.data);\n      reader.onloadend = () => {\n        ctx.decodeAudioData(reader.result).then(function(decodedData) {\n          const view = decodedData.getChannelData(0) //\n          setRawData(view); // This might be done by \n          setAudioURL(URL.createObjectURL(e.data))//log of base64data is \"data:audio/ogg; codecs=opus;base64,GkX...\"\n       });  \n    }\n    }; \n\n    recorder.addEventListener(\"dataavailable\", handleData);\n    return () => recorder.removeEventListener(\"dataavailable\", handleData);\n  }, [recorder, isRecording]);\n\n  const startRecording = () => {\n    setIsRecording(true);\n  };\n\n  const stopRecording = () => {\n    setIsRecording(false);\n  };\n\n  return [audioURL, isRecording, startRecording, stopRecording, rawData];\n};\n\nasync function requestRecorder() {\n  const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n  return new MediaRecorder(stream, options);\n}\nexport default useRecorder;\n\n\n"]},"metadata":{},"sourceType":"module"}