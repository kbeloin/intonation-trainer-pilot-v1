{"ast":null,"code":"var _jsxFileName = \"/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/SoundChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SoundChart(props) {\n  _s();\n\n  const [data, setData] = useState(props.data);\n  const [current, setCurrent] = useState();\n  const chartRef = props.fowardedRef;\n\n  const updateData = canvas => {\n    console.log(canvas);\n\n    if (canvas !== undefined) {\n      var ctx = canvas.getContext('2d');\n      return {\n        labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n        datasets: [{\n          label: '# of Votes',\n          data: [12, 19, 3, 5, 2, 3],\n          backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n          borderWidth: 1\n        }],\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      };\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"Triggered Refresh\");\n    updateData(chartRef);\n    setCurrent(data);\n  }, [props.data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: \"myChart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SoundChart, \"8KbaetwmbxaxrabKF+FbUjgV6R8=\");\n\n_c = SoundChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"SoundChart\");","map":{"version":3,"sources":["/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/SoundChart.js"],"names":["React","useState","useEffect","useRef","Line","SoundChart","props","data","setData","current","setCurrent","chartRef","fowardedRef","updateData","canvas","console","log","undefined","ctx","getContext","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,IAAT,QAAqB,iBAArB;;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACtC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAACK,KAAK,CAACC,IAAP,CAAhC;AACA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,EAAtC;AACA,QAAMU,QAAQ,GAAGL,KAAK,CAACM,WAAvB;;AAGA,QAAMC,UAAU,GAAIC,MAAD,IAAY;AAC3BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACJ,QAAIA,MAAM,KAAKG,SAAf,EAAyB;AACrB,UAAIC,GAAG,GAAGJ,MAAM,CAACK,UAAP,CAAkB,IAAlB,CAAV;AACA,aAAO;AACHC,QAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,MAAR,EAAgB,QAAhB,EAA0B,OAA1B,EAAmC,QAAnC,EAA6C,QAA7C,CADL;AAEHC,QAAAA,QAAQ,EAAE,CAAC;AACPC,UAAAA,KAAK,EAAE,YADA;AAEPf,UAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFC;AAGPgB,UAAAA,eAAe,EAAE,CACb,yBADa,EAEb,yBAFa,EAGb,yBAHa,EAIb,yBAJa,EAKb,0BALa,EAMb,yBANa,CAHV;AAWPC,UAAAA,WAAW,EAAE,CACT,uBADS,EAET,uBAFS,EAGT,uBAHS,EAIT,uBAJS,EAKT,wBALS,EAMT,uBANS,CAXN;AAmBPC,UAAAA,WAAW,EAAE;AAnBN,SAAD,CAFP;AAuBHC,QAAAA,OAAO,EAAE;AACLC,UAAAA,MAAM,EAAE;AACJC,YAAAA,CAAC,EAAE;AACCC,cAAAA,WAAW,EAAE;AADd;AADC;AADH;AAvBN,OAAP;AA+BH;AAEA,GArCD;;AAuCA3B,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAH,IAAAA,UAAU,CAACF,QAAD,CAAV;AACAD,IAAAA,UAAU,CAACH,IAAD,CAAV;AACH,GAJQ,EAIN,CAACD,KAAK,CAACC,IAAP,CAJM,CAAT;AAOA,sBAEI;AAAQ,IAAA,EAAE,EAAC;AAAX;AAAA;AAAA;AAAA;AAAA,UAFJ;AAKH;;GAzDuBF,U;;KAAAA,U","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { Line } from 'react-chartjs-2'\n\nexport default function SoundChart(props) {\n    const [data, setData] = useState(props.data)\n    const [current, setCurrent] = useState()\n    const chartRef = props.fowardedRef\n\n    \n    const updateData = (canvas) => {\n        console.log(canvas)\n    if (canvas !== undefined){\n        var ctx = canvas.getContext('2d')\n        return {\n            labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n            datasets: [{\n                label: '# of Votes',\n                data: [12, 19, 3, 5, 2, 3],\n                backgroundColor: [\n                    'rgba(255, 99, 132, 0.2)',\n                    'rgba(54, 162, 235, 0.2)',\n                    'rgba(255, 206, 86, 0.2)',\n                    'rgba(75, 192, 192, 0.2)',\n                    'rgba(153, 102, 255, 0.2)',\n                    'rgba(255, 159, 64, 0.2)'\n                ],\n                borderColor: [\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86, 1)',\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255, 1)',\n                    'rgba(255, 159, 64, 1)'\n                ],\n                borderWidth: 1\n                }],\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        }\n    }\n    \n    }\n\n    useEffect(() => {\n        console.log(\"Triggered Refresh\")\n        updateData(chartRef)\n        setCurrent(data)\n    }, [props.data])\n\n    \n    return (\n\n        <canvas id=\"myChart\"></canvas>\n    \n    )\n}\n"]},"metadata":{},"sourceType":"module"}