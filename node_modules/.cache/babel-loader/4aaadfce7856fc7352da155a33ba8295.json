{"ast":null,"code":"import React, { useState, useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\n\nconst skipped = (ctx, value) => ctx.p0.skip || ctx.p1.skip ? value : undefined;\n\nconst down = (ctx, value) => ctx.p0.parsed.y > ctx.p1.parsed.y ? value : undefined;\n\nexport const getPitchScatterData = processedData => {\n  let data = processedData['x_y'] || [];\n\n  for (let i = 0; i < data.length; i++) {\n    if (data[i]['x'] === 0) {\n      data[i]['x'] = NaN;\n    }\n\n    if (data[i]['y'] === 0) {\n      data[i]['y'] = NaN;\n    }\n  }\n\n  return data;\n};\nexport const resetCanvas = (id, container_id, chart) => {\n  document.getElementById(id).remove();\n  const newCanvas = document.createElement('canvas');\n  newCanvas.setAttribute('id', id);\n  document.getElementById(container_id).append(newCanvas);\n  newCanvas.append('Loading..');\n  return newCanvas;\n};\nexport const newPitchChart = (element, chart, data) => {\n  chart.destroy();\n  let ctx = element.getContext('2d');\n  let myChart = new Chart(ctx, {\n    type: 'scatter',\n    data: {\n      datasets: [{\n        label: 'Pitch Frequency',\n        data: data,\n        borderWidth: 1,\n        backgroundColor: 'rgb(255, 99, 132)'\n      }]\n    },\n    options: {\n      scales: {\n        y: {},\n        x: {}\n      }\n    }\n  });\n  return myChart;\n};\nexport const updateChart = (chart, data) => {\n  const processedData = getPitchScatterData(data);\n  chart.data.datasets.data = data;\n  chart.update();\n};\nexport default newPitchChart;","map":{"version":3,"sources":["/Users/kylebeloin/Desktop/intonation_trainer/intonation_trainer/src/components/pages/SoundChart.js"],"names":["React","useState","useEffect","useRef","Chart","registerables","register","skipped","ctx","value","p0","skip","p1","undefined","down","parsed","y","getPitchScatterData","processedData","data","i","length","NaN","resetCanvas","id","container_id","chart","document","getElementById","remove","newCanvas","createElement","setAttribute","append","newPitchChart","element","destroy","getContext","myChart","type","datasets","label","borderWidth","backgroundColor","options","scales","x","updateChart","update"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { Chart, registerables } from 'chart.js'\n\nChart.register(...registerables);\n\nconst skipped = (ctx, value) => ctx.p0.skip || ctx.p1.skip ? value : undefined;\nconst down = (ctx, value) => ctx.p0.parsed.y > ctx.p1.parsed.y ? value : undefined;\n\nexport const getPitchScatterData = (processedData) => {\n    \n    let data = processedData['x_y'] || []\n    for (let i = 0; i < data.length; i++) {\n        if (data[i]['x'] === 0) {\n            data[i]['x'] = NaN;\n        }\n        if (data[i]['y'] === 0) {\n            data[i]['y'] = NaN;\n        }\n      }\n\n    return data\n}\n\nexport const resetCanvas = (id, container_id, chart) => {\n    \n    document.getElementById(id).remove()\n    const newCanvas = document.createElement('canvas')\n    newCanvas.setAttribute('id', id)\n    document.getElementById(container_id).append(newCanvas)\n    newCanvas.append('Loading..')\n    return newCanvas\n}\n\nexport const newPitchChart = ( element, chart, data ) => {\n    chart.destroy()\n    let ctx = element.getContext('2d')\n    \n    let myChart = new Chart(ctx, {\n            type: 'scatter',\n            data: {\n                datasets: [{\n                    label: 'Pitch Frequency',\n                    data: data,\n                    borderWidth: 1,\n                    backgroundColor: 'rgb(255, 99, 132)'\n                }]\n            },\n            options: {\n                scales: {\n                    y: { },\n                    x: { }\n                }\n            }\n        });\n    return myChart\n}\n\nexport const updateChart = (chart, data) => {\n    const processedData = getPitchScatterData(data)\n    chart.data.datasets.data = data\n    chart.update()\n}\n\nexport default newPitchChart\n"]},"metadata":{},"sourceType":"module"}