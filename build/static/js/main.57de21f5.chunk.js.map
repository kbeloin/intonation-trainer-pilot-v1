{"version":3,"sources":["components/pages/Welcome.js","components/pages/useRecorder.js","components/pages/Recorder.js","components/pages/Player.js","components/pages/SoundChart.js","components/pages/ProductionTask.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","content","justifyContent","display","paper","padding","spacing","flexDirection","minWidth","minHeight","elevation","alignItems","container","position","height","button","bottom","right","grid","direction","withRouter","props","classes","className","Paper","Grid","Typography","variant","component","gutterBottom","Container","to","style","textDecoration","Button","options","audioBitsPerSecond","a","navigator","mediaDevices","getUserMedia","audio","stream","MediaRecorder","useRecorder","useState","audioURL","setAudioURL","isRecording","setIsRecording","recorder","setRecorder","rawData","setRawData","useEffect","start","stop","handleData","e","console","log","data","blob","Blob","ctx","AudioContext","reader","FileReader","readAsArrayBuffer","onloadend","decodeAudioData","result","then","decodedData","view","getChannelData","URL","createObjectURL","addEventListener","removeEventListener","requestRecorder","error","axios","defaults","xsrfCookieName","xsrfHeaderName","chart","border","Recorder","startRecording","stopRecording","audioRef","useRef","current","event","sets","id","ref","forwardedRef","src","controls","onClick","disabled","Player","marginRight","Chart","register","registerables","getData","processedData","time","pitch","pData","map","x","i","y","newChart","element","getContext","type","datasets","label","borderWidth","backgroundColor","scales","marginBottom","getCSRF","document","cookie","split","find","row","startsWith","setCurrentSrc","staged","setStagedData","setProcessedData","setChartA","setChartB","responseDataRef","questionDataRef","undefined","getElementById","remove","newCanvas","createElement","setAttribute","append","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","this","readyState","DONE","status","response","JSON","parse","responseText","send","stringify","processData","item","App","exact","path","Welcome","Unit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.57de21f5.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport {withRouter, NavLink} from 'react-router-dom'\nimport Container from '@material-ui/core/Container'\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    justifyContent: \"center\",\n    display: \"flex\"\n  },\n    paper: {\n      padding: theme.spacing(2),\n      flexDirection: \"column\",\n      minWidth: '100vw',\n      minHeight: '80vh',\n      display:\"flex\",\n      elevation: 3,\n      justifyContent:\"center\",\n      alignItems:\"center\"\n    },\n    container: {\n        position: 'relative',\n        height: '100%',\n        justifyContent: \"center\"\n    },\n    button: {\n        position: 'absolute',\n        bottom:'0',\n        right: '0'\n    },\n    grid: {\n        height: \"50%\",\n        justifyContent:\"center\",\n        spacing:\"0\",\n        alignItems:\"center\",\n        direction:\"column\",\n        minHeight:\"100%\"\n    }\n}));\n\nconst Welcome = (props) => {\n    const classes = useStyles();\n  \n    return (\n      <div className={classes.content}>\n        <Paper className={classes.paper}>\n            <Grid container className={classes.grid}>\n                <Typography variant=\"h1\" component=\"h2\" gutterBottom>\n                    Welcome\n                </Typography>\n            </Grid>\n            <Container className={classes.container}>\n              <NavLink className={classes.button} to='/2' style={{ textDecoration: 'none' }} key= ''>\n                <Button variant=\"outlined\">Enter</Button>\n              </NavLink>\n            </Container>\n        </Paper>\n        </div>\n        );\n    }\n\nexport default withRouter(Welcome);\n\n","import { useEffect, useState } from \"react\";\n\n\n\nvar options = {\n  audioBitsPerSecond: 16000\n}\n\nvar chunks = []\n\n\nconst useRecorder = () => {\n  const [audioURL, setAudioURL] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [recorder, setRecorder] = useState(null);\n  const [rawData, setRawData] = useState(null)\n\n  useEffect(() => {\n    // Lazily obtain recorder first time we're recording.\n    if (recorder === null) {\n      if (isRecording) {\n        requestRecorder().then(setRecorder, console.error);\n      }\n      return;\n    }\n\n    // Manage recorder state.\n    if (isRecording) {\n      recorder.start();\n    } else {\n      recorder.stop();\n    }\n\n    // Obtain the audio when ready.\n    const handleData = e => {\n    console.log(e.data)\n    const blob = new Blob([e.data]);\n    const ctx = new AudioContext()\n    \n\n    var reader = new FileReader();\n    reader.readAsArrayBuffer(blob);\n    reader.onloadend = () => {\n      ctx.decodeAudioData(reader.result).then(function(decodedData) {\n        const view = decodedData.getChannelData(0)\n        console.log(decodedData)\n        setRawData(view);\n        setAudioURL(URL.createObjectURL(e.data))//log of base64data is \"data:audio/ogg; codecs=opus;base64,GkX...\"\n       });\n      \n      //log of base64data is \"data:audio/ogg; codecs=opus;base64,GkX...\"\n    }\n    \n    }; \n      \n     // Trying to set the media type here so it matches with upload\n    \n    \n    // readyState will be 2\n\n    recorder.addEventListener(\"dataavailable\", handleData);\n    return () => recorder.removeEventListener(\"dataavailable\", handleData);\n  }, [recorder, isRecording]);\n\n  const startRecording = () => {\n    setIsRecording(true);\n  };\n\n  const stopRecording = () => {\n    setIsRecording(false);\n  };\n\n  return [audioURL, isRecording, startRecording, stopRecording, rawData];\n};\n\nasync function requestRecorder() {\n  const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n  return new MediaRecorder(stream, options);\n}\nexport default useRecorder;\n\n\n","\nimport { useState, useRef } from  'react'\nimport { render } from \"react-dom\";\nimport useRecorder from \"./useRecorder\";\nimport axios from \"axios\";\nimport { Button, Container, Grid } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles';\n\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    justifyContent: \"center\",\n    display: \"flex\"\n  },\n    paper: {\n        padding: theme.spacing(2),\n        flexDirection: \"column\",\n        minWidth: '100vw',\n        minHeight: '80vh',\n        display:\"flex\",\n        elevation: 3,\n        justifyContent:\"center\",\n        alignItems:\"center\"\n    },\n    container: {\n        position: 'relative',\n        height: '100%',\n        justifyContent: \"center\"\n    },\n    \n    grid: {\n      display:\"flex\",\n        justifyContent:\"space-evenly\",\n        spacing:\"2\",\n    },\n\n    chart: {\n      height: \"100px\",\n      border: \"black\"\n\n    }\n}));\n\nconst Recorder = (props) => {\n  let [audioURL, isRecording, startRecording, stopRecording, rawData] = useRecorder();\n  let audioRef = useRef()\n  const classes = useStyles();\n  const audio = audioRef.current\n\n  // const handlestop = props.sets(rawData)\n  \n  const currentAudio = audio ? audio.addEventListener('canplaythrough', (event) => {\n    if (rawData) {props.sets(rawData)};\n    return\n  }) : \"NONE\";\n\n  return (\n    <div className=\"Recorder\" id=\"recorder\" ref={props.forwardedRef}>\n    <Grid container className={classes.grid}>\n      <audio src={audioURL} ref={audioRef} controls/>\n      <Button onClick={startRecording} disabled={isRecording}>\n        start\n      </Button>\n      <Button onClick={stopRecording} disabled={!isRecording}>\n        stop\n      </Button>\n      </Grid> \n    </div>\n  );\n}\nexport default Recorder;","import React from 'react'\n\nexport default function Player() {\n    return (\n        <div className=\"Player\" style={{marginRight: \"100px\"}}>\n            <audio\n                controls\n                src=\"https://intonation-trainer.s3.us-east-2.amazonaws.com/test-audio.mp3\" />\n        </div>\n    )\n}\n","import React, { useState, useEffect, useRef } from 'react'\nimport { Chart, registerables } from 'chart.js'\n\nChart.register(...registerables);\n\nexport const getData = (processedData) => {\n    const data = processedData['data'] || []\n    const time = data['time']\n    const pitch = data['pitch']\n    const pData = time.map((x, i) => ({ x, y: pitch[i] }))\n    \n    console.log(pData)\n    \n    return pData\n}\n\n\nconst getConfig = () => {  \n    const config = {\n        type: 'scatter',\n        datasets: [],\n        options: {\n          scales: {\n            x: {\n              grid: {\n                tickColor: 'red'\n              },\n              ticks: {\n                color: 'blue',\n              }\n            }\n          }\n        }\n      };\n    return config\n}\n\nexport const createChart = (parent) => {\n    const chart = document.createElement('canvas');\n    chart.setAttribute(\"id\", \"Chart\");\n    parent.appendChild(chart)\n    return chart\n}\n\nexport const newChart = ( element, data ) => {\n    var ctx = element.getContext('2d')\n    const myChart = new Chart(ctx, {\n            type: 'scatter',\n            data: {\n                datasets: [{\n                    label: 'Pitch Frequency',\n                    data: data,\n                    borderWidth: 1,\n                    backgroundColor: 'rgb(255, 99, 132)'\n                }]\n            },\n            options: {\n                scales: {\n                    y: { },\n                    x: { }\n                }\n            }\n        });\n    return myChart\n}\n\nexport const updateChart = (chart, data) => {\n    const processedData = getData(data)\n    console.log(processedData)\n    console.log(chart)\n    chart.data.datasets.data = data\n    chart.update()\n    \n}\n\n\n// export const updateChart = () => {\n\n// }\n\nexport default newChart\n","import React, { useState, useEffect, useRef } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container'\nimport { withRouter, NavLink } from 'react-router-dom';\nimport Recorder from './Recorder.js'\nimport Player from './Player.js';\nimport axios from \"axios\";\nimport { Scatter} from 'react-chartjs-2'\nimport { newChart, updateChart, getData } from './SoundChart.js';\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    justifyContent: \"center\",\n    display: \"flex\"\n  },\n    paper: {\n        padding: theme.spacing(2),\n        flexDirection: \"row\",\n        minWidth: '100vw',\n        minHeight: '80vh',\n        display:\"flex-box\",\n        elevation: 3,\n        alignItems:\"center\"\n    },\n    container: {\n        position: 'relative',\n        height: '100%',\n        justifyContent: \"center\"\n    },\n    button: {\n        position: 'absolute',\n        bottom:'0',\n        right: '0'\n    },\n    grid: {\n        height: \"50%\",\n        justifyContent:\"space-evenly\",\n        spacing:\"0\",\n        alignItems:\"flex-end\",\n        direction:\"column\",\n        minHeight:\"100%\"\n    },\n\n    chart: {\n        justifyContent:\"space-evenly\",\n        spacing:\"0\",\n        alignItems:\"flex-end\",\n        direction:\"column\",\n        minHeight:\"40%\",\n        marginBottom: \"1vh\",\n        minWidth:\"35vw\",\n    }\n}));\n\nconst getCSRF = () => {\n    try {\n    const token = document.cookie\n        .split('; ')\n        .find(row => row.startsWith('csrftoken='))\n        .split('=')[1]\n    return token\n    } catch (e) {console.log(e)}\n}\n\nconst uploadFile = (file, s3Data, url) => {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"POST\",url);\n    console.log(s3Data)\n    var postData = new FormData();\n    var fields = s3Data.fields\n    console.log(fields)\n    Object.entries(s3Data).forEach(([key, value]) => \n    xhr.setRequestHeader(key, value));\n\n    postData.append('file', file);\n  \n    xhr.onreadystatechange = function() {\n      if(xhr.readyState === 4){\n        if(xhr.status === 200 || xhr.status === 204){\n            var response = JSON.parse(xhr.responseText);\n            console.log(response)\n        }\n        else{\n          alert(\"Could not upload file.\");\n        }\n     }\n    };\n    console.log(file)\n    xhr.send(postData);\n  }\n\n\nconst getSignedRequest = (file) => {\n    \n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", \"/api/sign_s3\");\n    xhr.setRequestHeader(\"X-CSRFToken\", getCSRF());\n    xhr.onreadystatechange = function(){\n        if(xhr.readyState === 4){\n        if(xhr.status === 200){\n            var response = JSON.parse(xhr.responseText);\n            console.log(response)\n            uploadFile(file, response.data, response.url);\n        }\n        else{\n            alert(\"Could not get signed URL.\");\n        }\n        }\n    };\n    xhr.send();\n    }\n\n\n\nconst ProdTask = (props) => {\n    let [src, setCurrentSrc] = useState()\n    let [staged, setStagedData] = useState()\n    let [processedData, setProcessedData] = useState(null)\n    let [chartA, setChartA] = useState()\n    let [chartB, setChartB] = useState()\n    const classes = useStyles();\n    const responseDataRef = useRef(null);\n    const questionDataRef = useRef(null);\n    \n    \n\n    const handleChange = () => {\n        let audio = staged\n        \n        // document.getElementById(\"recorder\").currentSrc\n        setCurrentSrc(staged)     // console.log(src)\n    }\n    \n    const processData = (data) => {\n        console.log(staged)\n        document.getElementById('responseData').remove()\n        const newCanvas = document.createElement('canvas')\n        newCanvas.setAttribute('id', 'responseData')\n        \n        document.getElementById('responseDataContainer').append(newCanvas)\n\n        var xhr = new XMLHttpRequest()\n        xhr.open(\"POST\", \"/api/process/\", true);\n        xhr.setRequestHeader(\"X-CSRFToken\", getCSRF());\n        //Send the proper header information along with the request\n        xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\n    \n        \n        xhr.onreadystatechange = function() { // Call a function when the state changes.\n            if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {\n                var response = JSON.parse(xhr.responseText);\n                newChart(newCanvas, getData(response))\n                setProcessedData(response)\n                \n            }\n        }\n        \n        xhr.send(JSON.stringify(data))\n    \n    }\n    // useEffect(() => {\n    //     // Update the document title using the browser API\n        \n    //     src === undefined ? console.log(\"None\") : processData(src)},[src]);\n    \n    useEffect(() => {\n        // Update the document title using the browser AP\n        src === undefined ? console.log(\"None\") : processData(src)},[src]);\n\n    useEffect(() => {\n            // Update the document title using the browser API\n        \n        console.log(processedData)\n    },[processedData]);\n\n    useEffect(() => {\n        setChartA(newChart(questionDataRef.current, []))\n        setChartB(newChart(responseDataRef.current, []))\n        // Update the document title using the browser AP\n},[]);\n    \n\n    \n    return (\n        <div className={classes.content}>\n            <Paper className={classes.paper}>\n                <Grid container className={classes.grid}>\n                    <Grid item>\n                        <Paper className={classes.chart}>  \n                            <canvas id=\"questionData\" ref={questionDataRef}></canvas>\n                        </Paper>\n                        <Player/>\n                    </Grid>\n                    <Grid item>\n                        <Paper id=\"responseDataContainer\" className={classes.chart}>\n                            <canvas id=\"responseData\" ref={responseDataRef}></canvas>\n                        </Paper>\n                        <Recorder sets={setStagedData}/>\n                    </Grid>\n                    <Grid item>\n                        <Button variant=\"outlined\" onClick={handleChange}>Welcome</Button>\n                    </Grid>\n                </Grid>\n            </Paper>\n        </div>\n        );\n    }\nexport default withRouter(ProdTask)\n","import React, { useState, useEffect } from 'react'\nimport Welcome from './components/pages/Welcome'\nimport Unit from './components/pages/ProductionTask'\nimport { MemoryRouter } from \"react-router-dom\"\nimport { Route, Switch } from 'react-router-dom'\n\nexport default function App() {\n\n    return (\n      <div className=\"App\">\n        <MemoryRouter>\n          <Switch>\n            <Route exact path=\"/\" component={Welcome} />\n            <Route path=\"/2\" component={Unit} />\n          </Switch>\n        </MemoryRouter>\n        \n      </div>\n    );\n  }\n  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}