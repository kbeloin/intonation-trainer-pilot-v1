{"version":3,"sources":["components/pages/Welcome.js","components/pages/useRecorder.js","components/pages/Recorder.js","components/pages/Player.js","components/pages/ProductionTask.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","content","justifyContent","display","paper","padding","spacing","flexDirection","minWidth","minHeight","elevation","alignItems","container","position","height","button","bottom","right","grid","direction","withRouter","props","classes","className","Paper","Grid","Typography","variant","component","gutterBottom","Container","to","style","textDecoration","Button","options","audioBitsPerSecond","a","navigator","mediaDevices","getUserMedia","audio","stream","MediaRecorder","useRecorder","useState","audioURL","setAudioURL","isRecording","setIsRecording","recorder","setRecorder","rawData","setRawData","useEffect","start","stop","handleData","e","blob","Blob","data","reader","FileReader","readAsArrayBuffer","onloadend","view","Int8Array","result","URL","createObjectURL","addEventListener","removeEventListener","requestRecorder","then","console","error","axios","defaults","xsrfCookieName","xsrfHeaderName","Recorder","startRecording","stopRecording","audioRef","useRef","current","event","sets","id","ref","forwardedRef","contaimer","onClick","disabled","src","controls","Player","getCSRF","document","cookie","split","find","row","startsWith","log","setCurrentSrc","staged","setStagedData","childRef","undefined","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","this","readyState","DONE","status","send","JSON","stringify","processData","item","App","exact","path","Welcome","Unit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7c646710.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport {withRouter, NavLink} from 'react-router-dom'\nimport Container from '@material-ui/core/Container'\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    justifyContent: \"center\",\n    display: \"flex\"\n  },\n    paper: {\n      padding: theme.spacing(2),\n      flexDirection: \"column\",\n      minWidth: '100vw',\n      minHeight: '80vh',\n      display:\"flex\",\n      elevation: 3,\n      justifyContent:\"center\",\n      alignItems:\"center\"\n    },\n    container: {\n        position: 'relative',\n        height: '100%',\n        justifyContent: \"center\"\n    },\n    button: {\n        position: 'absolute',\n        bottom:'0',\n        right: '0'\n    },\n    grid: {\n        height: \"50%\",\n        justifyContent:\"center\",\n        spacing:\"0\",\n        alignItems:\"center\",\n        direction:\"column\",\n        minHeight:\"100%\"\n    }\n}));\n\nconst Welcome = (props) => {\n    const classes = useStyles();\n  \n    return (\n      <div className={classes.content}>\n        <Paper className={classes.paper}>\n            <Grid container className={classes.grid}>\n                <Typography variant=\"h1\" component=\"h2\" gutterBottom>\n                    Welcome\n                </Typography>\n            </Grid>\n            <Container className={classes.container}>\n              <NavLink className={classes.button} to='/2' style={{ textDecoration: 'none' }} key= ''>\n                <Button variant=\"outlined\">Enter</Button>\n              </NavLink>\n            </Container>\n        </Paper>\n        </div>\n        );\n    }\n\nexport default withRouter(Welcome);\n\n","import { useEffect, useState } from \"react\";\n\n\nvar options = {\n  audioBitsPerSecond: 16000\n}\n\nvar chunks = []\n\n\nconst useRecorder = () => {\n  const [audioURL, setAudioURL] = useState(\"\");\n  const [isRecording, setIsRecording] = useState(false);\n  const [recorder, setRecorder] = useState(null);\n  const [rawData, setRawData] = useState(null)\n\n  useEffect(() => {\n    // Lazily obtain recorder first time we're recording.\n    if (recorder === null) {\n      if (isRecording) {\n        requestRecorder().then(setRecorder, console.error);\n      }\n      return;\n    }\n\n    // Manage recorder state.\n    if (isRecording) {\n      recorder.start();\n    } else {\n      recorder.stop();\n    }\n\n    // Obtain the audio when ready.\n    const handleData = e => {\n    const blob = new Blob([e.data]);\n    var reader = new FileReader();\n    reader.readAsArrayBuffer(blob);\n    reader.onloadend = () => {\n      let view = new Int8Array(reader.result)\n      \n      setRawData(view);\n      setAudioURL(URL.createObjectURL(e.data))//log of base64data is \"data:audio/ogg; codecs=opus;base64,GkX...\"\n    }\n    \n    }; \n      \n     // Trying to set the media type here so it matches with upload\n    \n    \n    // readyState will be 2\n\n    recorder.addEventListener(\"dataavailable\", handleData);\n    return () => recorder.removeEventListener(\"dataavailable\", handleData);\n  }, [recorder, isRecording]);\n\n  const startRecording = () => {\n    setIsRecording(true);\n  };\n\n  const stopRecording = () => {\n    setIsRecording(false);\n  };\n\n  return [audioURL, isRecording, startRecording, stopRecording, rawData];\n};\n\nasync function requestRecorder() {\n  const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n  return new MediaRecorder(stream, options);\n}\nexport default useRecorder;\n\n\n","\nimport { useState, useRef } from  'react'\nimport { render } from \"react-dom\";\nimport useRecorder from \"./useRecorder\";\nimport axios from \"axios\";\nimport { Button, Container, Grid } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles';\n\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    justifyContent: \"center\",\n    display: \"flex\"\n  },\n    paper: {\n        padding: theme.spacing(2),\n        flexDirection: \"column\",\n        minWidth: '100vw',\n        minHeight: '80vh',\n        display:\"flex\",\n        elevation: 3,\n        justifyContent:\"center\",\n        alignItems:\"center\"\n    },\n    container: {\n        position: 'relative',\n        height: '100%',\n        justifyContent: \"center\"\n    },\n    \n    grid: {\n      display:\"flex\",\n        justifyContent:\"space-evenly\",\n        spacing:\"2\",\n        \n       \n        \n    }\n}));\n\nconst Recorder = (props) => {\n  let [audioURL, isRecording, startRecording, stopRecording, rawData] = useRecorder();\n  let audioRef = useRef()\n  const classes = useStyles();\n  const audio = audioRef.current\n\n  // const handlestop = props.sets(rawData)\n  \n  const currentAudio = audio ? audio.addEventListener('canplaythrough', (event) => {\n    if (rawData) {props.sets(rawData)};\n    return\n  }) : \"NONE\";\n\n  return (\n    <div className=\"Recorder\" id=\"recorder\" ref={props.forwardedRef}>\n    <Grid contaimer className={classes.grid}>\n    <Button onClick={startRecording} disabled={isRecording}>\n        start recording\n      </Button>\n      <Button onClick={stopRecording} disabled={!isRecording}>\n        stop recording\n      </Button>\n      <audio src={audioURL} ref={audioRef} controls/>\n      \n      </Grid>\n      \n    </div>\n  );\n}\nexport default Recorder;","import React from 'react'\n\nexport default function Player() {\n    return (\n        <div className=\"Player\">\n            <audio\n                controls\n                src=\"https://intonation-trainer.s3.us-east-2.amazonaws.com/test-audio.mp3\" />\n        </div>\n    )\n}\n","import React, { useState, useEffect, useRef } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container'\nimport { withRouter, NavLink } from 'react-router-dom';\nimport Recorder from './Recorder.js'\nimport Player from './Player.js';\nimport axios from \"axios\";\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    justifyContent: \"center\",\n    display: \"flex\"\n  },\n    paper: {\n        padding: theme.spacing(2),\n        flexDirection: \"column\",\n        minWidth: '100vw',\n        minHeight: '80vh',\n        display:\"flex\",\n        elevation: 3,\n        \n        alignItems:\"center\"\n    },\n    container: {\n        position: 'relative',\n        height: '100%',\n        justifyContent: \"center\"\n    },\n    button: {\n        position: 'absolute',\n        bottom:'0',\n        right: '0'\n    },\n    grid: {\n        height: \"50%\",\n        justifyContent:\"space-evenly\",\n        spacing:\"0\",\n        alignItems:\"flex-end\",\n        direction:\"column\",\n        minHeight:\"100%\"\n    }\n}));\n\nconst getCSRF = () => {\n    try {\n    const token = document.cookie\n        .split('; ')\n        .find(row => row.startsWith('csrftoken='))\n        .split('=')[1]\n    return token\n    } catch (e) {console.log(e)}\n}\n\nconst uploadFile = (file, s3Data, url) => {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"POST\",url);\n    console.log(s3Data)\n    var postData = new FormData();\n    var fields = s3Data.fields\n    console.log(fields)\n    Object.entries(s3Data).forEach(([key, value]) => \n    xhr.setRequestHeader(key, value));\n\n    postData.append('file', file);\n  \n    xhr.onreadystatechange = function() {\n      if(xhr.readyState === 4){\n        if(xhr.status === 200 || xhr.status === 204){\n            var response = JSON.parse(xhr.responseText);\n            console.log(response)\n        }\n        else{\n          alert(\"Could not upload file.\");\n        }\n     }\n    };\n    console.log(file)\n    xhr.send(postData);\n  }\n\n\nconst getSignedRequest = (file) => {\n    \n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", \"/api/sign_s3\");\n    xhr.setRequestHeader(\"X-CSRFToken\", getCSRF());\n    xhr.onreadystatechange = function(){\n        if(xhr.readyState === 4){\n        if(xhr.status === 200){\n            var response = JSON.parse(xhr.responseText);\n            console.log(response)\n            uploadFile(file, response.data, response.url);\n        }\n        else{\n            alert(\"Could not get signed URL.\");\n        }\n        }\n    };\n    xhr.send();\n    }\n\nconst processData = (data) => {\n    var xhr = new XMLHttpRequest()\n    \n\n    xhr.open(\"POST\", \"/api/process/\", true);\n    xhr.setRequestHeader(\"X-CSRFToken\", getCSRF());\n    //Send the proper header information along with the request\n    xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\n\n    \n    xhr.onreadystatechange = function() { // Call a function when the state changes.\n        if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {\n            // Request finished. Do processing here.\n        }\n    }\n    \n    xhr.send(JSON.stringify(data))\n\n}\n\nconst ProdTask = (props) => {\n    let [src, setCurrentSrc] = useState()\n    let [staged, setStagedData] = useState()\n    const classes = useStyles();\n    const childRef = useRef(null);\n    \n\n    const handleChange = () => {\n        let audio = staged\n        console.log(staged)\n        // document.getElementById(\"recorder\").currentSrc\n        setCurrentSrc(staged)     // console.log(src)\n    }\n    \n    // useEffect(() => {\n    //     // Update the document title using the browser API\n        \n    //     src === undefined ? console.log(\"None\") : processData(src)},[src]);\n    \n    useEffect(() => {\n        // Update the document title using the browser API\n        \n        src === undefined ? console.log(\"None\") : processData(src)},[src]);\n\n    \n    return (\n      <div className={classes.content}>\n        <Paper className={classes.paper}>\n            <Container className={classes.container}>\n                <Grid container className={classes.grid}>\n                    <Grid item>\n                        <Player />\n                    </Grid>\n                    <Grid item>\n                        <Recorder forwardedRef={childRef} sets={setStagedData}/>\n                    </Grid>\n                    <Grid item>\n                        <Button variant=\"outlined\" onClick={handleChange}>Welcome</Button>\n                    </Grid>\n                </Grid>\n            </Container>\n        </Paper>\n        </div>\n        );\n    }\nexport default withRouter(ProdTask)\n","import React, { useState, useEffect } from 'react'\nimport Welcome from './components/pages/Welcome'\nimport Unit from './components/pages/ProductionTask'\nimport { MemoryRouter } from \"react-router-dom\"\nimport { Route, Switch } from 'react-router-dom'\n\nexport default function App() {\n\n    return (\n      <div className=\"App\">\n        <MemoryRouter>\n          <Switch>\n            <Route exact path=\"/\" component={Welcome} />\n            <Route path=\"/2\" component={Unit} />\n          </Switch>\n        </MemoryRouter>\n        \n      </div>\n    );\n  }\n  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}