{"version":3,"sources":["components/utils/responseHelper.js","components/utils/useRecorder.js","components/elements/Recorder.js","components/elements/Player.js","components/utils/processAudio.js","components/elements/AudioCharts.js","components/pages/PerceptionTask.js","components/pages/ProductionTask.js","components/pages/Welcome.js","components/pages/End.js","App.js","reportWebVitals.js","index.js"],"names":["axios","defaults","xsrfCookieName","xsrfHeaderName","options","audioBitsPerSecond","AudioContext","FileReader","a","navigator","mediaDevices","getUserMedia","audio","stream","MediaRecorder","useRecorder","useState","audioURL","setAudioURL","isRecording","setIsRecording","recorder","setRecorder","rawData","setRawData","useEffect","start","stop","handleData","e","ctx","reader","readAsArrayBuffer","data","onloadend","console","log","decodeAudioData","result","then","decodedData","view","getChannelData","URL","createObjectURL","addEventListener","removeEventListener","requestRecorder","error","Recorder","props","startRecording","stopRecording","sets","className","id","ref","forwardedRef","Grid","container","src","controls","Button","onClick","disabled","Player","url","processAudioData","method","headers","transformRequest","JSON","stringify","transformResponse","parse","response","getPitchScatterData","processedData","i","length","NaN","Chart","register","registerables","PitchChart","chartRef","useRef","current","getContext","type","datasets","label","borderWidth","backgroundColor","scales","y","x","useStyles","makeStyles","theme","content","justifyContent","display","paper","padding","spacing","flexDirection","minWidth","minHeight","elevation","alignItems","position","height","button","bottom","right","grid","direction","chart","marginBottom","withRouter","classes","setProcessedData","isLoading","toggleLoading","Paper","item","CircularProgress","pitchData","handleAudioChange","variant","currentTask","setCurrentTask","taskRef","nav","setAttribute","Typography","component","gutterBottom","Container","to","style","textDecoration","App","exact","path","Welcome","ProductionTaskTemplate","PerceptionTaskTemplate","End","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f47bbdaf.chunk.js","sourcesContent":["import axios from \"axios\";\n\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\n\nexport const getResponses = async (data) => {\n    const response = await axios({\n        method: \"get\",\n        url: \"/api/responses/\",\n    });\n    console.log(\"Asychronous response\")\n    return response\n}\n\nexport const submitResponse = () => {\n    \n}\n\nexport default submitResponse","import { useEffect, useState } from \"react\";\n\n\n\nvar options = {\n  audioBitsPerSecond: 16000\n}\n\n\nconst ctx = new AudioContext();\nconst reader = new FileReader();\n\nconst useRecorder = () => {\nconst [audioURL, setAudioURL] = useState(\"\");\nconst [isRecording, setIsRecording] = useState(false);\nconst [recorder, setRecorder] = useState(null);\nconst [rawData, setRawData] = useState(null)\n  \n\n  useEffect(() => {\n    // Lazily obtain recorder first time we're recording.\n    if (recorder === null) {\n      if (isRecording) {\n        requestRecorder().then(setRecorder, console.error);\n      }\n      return;\n    }\n\n    // Manage recorder state.\n    if (isRecording) {\n      recorder.start();\n    } else {\n      recorder.stop();\n    }\n\n    // Obtain the audio when ready.\n    const handleData = e => {\n      // const blob = new Blob([e.data]);\n      let ctx = new AudioContext();\n      let reader = new FileReader();\n\n      reader.readAsArrayBuffer(e.data);\n      reader.onloadend = () => {\n        console.log('data loaded')\n        ctx.decodeAudioData(reader.result).then(function(decodedData) {\n          console.log(decodedData)\n          const view = decodedData.getChannelData(0) //\n          setRawData(view); // This might be done by \n          setAudioURL(URL.createObjectURL(e.data))//log of base64data is \"data:audio/ogg; codecs=opus;base64,GkX...\"\n       });  \n    }\n    }; \n\n    recorder.addEventListener(\"dataavailable\", handleData);\n    return () => recorder.removeEventListener(\"dataavailable\", handleData);\n  }, [recorder, isRecording]);\n\n  const startRecording = () => {\n    setIsRecording(true);\n  };\n\n  const stopRecording = () => {\n    setIsRecording(false);\n  };\n\n  return [audioURL, isRecording, startRecording, stopRecording, rawData];\n};\n\nasync function requestRecorder() {\n  const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n  return new MediaRecorder(stream, options);\n}\nexport default useRecorder;\n\n\n","\nimport { useEffect } from  'react'\nimport useRecorder from \"../utils/useRecorder\";\nimport { Button, Grid } from '@material-ui/core'\n\nconst Recorder = (props) => {\n  let [audioURL, isRecording, startRecording, stopRecording, rawData] = useRecorder();\n  \n  useEffect(() => {\n    if (rawData) {\n      console.log(\"Raw data ready.\")\n      props.sets(rawData)\n    } else console.log(\"No current audio.\");\n  }, [rawData])\n\n  return (\n    <div className=\"Recorder\" id=\"recorder\" ref={props.forwardedRef}>\n    <Grid container>\n      <audio src={audioURL} controls/>\n      <Button onClick={startRecording} disabled={isRecording}>\n        start\n      </Button>\n      <Button onClick={stopRecording} disabled={!isRecording}>\n        stop\n      </Button>\n      </Grid> \n    </div>\n  );\n}\n\nexport default Recorder;","import React from 'react'\n\nconst Player = (props) => {\n    return (\n        <div className=\"Player\">\n            <audio controls src={props.url}/>\n        </div>\n    )\n}\n\nexport default Player\n","import { getCSRF } from './csrfHelper.js'\nimport axios from 'axios'\n\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\n\nexport const processAudioData = async (data) => {\n    const response = await axios({\n        method: \"post\",\n        url: \"/api/process/\",\n        data: data,\n        headers: {\"Content-Type\": \"application/octet-stream\"},\n        transformRequest: [(data) => {\n            console.log(\"hello from transform\")\n            return JSON.stringify(data);\n        }],\n        transformResponse: [(data) => {\n            console.log(\"hello from response\")\n            return JSON.parse(data);\n        }]\n    });\n    console.log(\"Asychronous response\")\n    return response\n}\n\nexport const getPitchScatterData = (processedData) => {\n    \n    let data = processedData['x_y'] || []\n    for (let i = 0; i < data.length; i++) {\n        if (data[i]['x'] === 0) {\n            data[i]['x'] = NaN;\n        }\n        if (data[i]['y'] === 0) {\n            data[i]['y'] = NaN;\n        }\n      }\n\n    return data\n}\n\nexport default processAudioData","import React, { useEffect, useRef } from 'react'\nimport { Chart, registerables } from 'chart.js'\n\nChart.register(...registerables);\n\nexport const PitchChart = ( props ) => {\n    let chartRef = useRef()\n    \n    useEffect(() => {\n        let ctx = chartRef.current.getContext('2d')\n\n        let myChart = new Chart(ctx, {\n            type: 'scatter',\n            data: {\n                datasets: [{\n                    label: 'Pitch Frequency',\n                    data: props.data,\n                    borderWidth: 1,\n                    backgroundColor: 'rgb(255, 99, 132)'\n                    }]\n                },\n                options: {\n                    scales: {\n                        y: { },\n                        x: { }\n                    }\n                }\n            });\n        },[])\n\n    return (\n        <canvas id=\"question-data\" ref={chartRef}></canvas>\n    )\n}\n","import React, { useState, useEffect, useRef } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { CircularProgress } from '@mui/material';\nimport { withRouter, NavLink } from 'react-router-dom';\nimport Recorder from '../elements/Recorder'\nimport Player from '../elements/Player';\nimport { processAudioData, getPitchScatterData } from '../utils/processAudio.js'\nimport { submitResponse } from '../utils/responseHelper'\nimport { PitchChart } from '../elements/AudioCharts';\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    justifyContent: \"center\",\n    display: \"flex\"\n  },\n    paper: {\n        padding: theme.spacing(2),\n        flexDirection: \"row\",\n        minWidth: '100vw',\n        minHeight: '80vh',\n        display:\"flex-box\",\n        elevation: 3,\n        alignItems:\"center\"\n    },\n    container: {\n        position: 'relative',\n        height: '100%',\n        justifyContent: \"center\"\n    },\n    button: {\n        position: 'absolute',\n        bottom:'0',\n        right: '0'\n    },\n    grid: {\n        height: \"50%\",\n        justifyContent:\"space-evenly\",\n        spacing:\"0\",\n        alignItems:\"flex-end\",\n        direction:\"column\",\n        minHeight:\"100%\"\n    },\n\n    chart: {\n        display: 'flex',\n        justifyContent:\"center\",\n        alignItems:\"center\",\n        direction:\"column\",\n        minHeight:\"40%\",\n        marginBottom: \"1vh\",\n        minWidth:\"35vw\",\n    }\n}));\n\nconst PerceptionTaskTemplate = (props) => {\n    const classes = useStyles();\n    let [processedData, setProcessedData] = useState({})\n    let [taskData, setTaskData] = useState(true)\n    let [isLoading, toggleLoading] = useState(true)\n\n    let [chartA, setChartA] = useState()\n    let [chartB, setChartB] = useState()\n\n    let responseDataRef = useRef(null);\n    let questionDataRef = useRef(null);\n    \n    let handleAudioChange = (data) => {\n        // let newCanvas = resetCanvas('response-data', 'response-data-container', chartB)\n        console.log(isLoading)\n        processAudioData(data).then((response) => { \n            let pitchData = getPitchScatterData(response.data)\n            // setChartB(newPitchChart(newCanvas, pitchData, chartB)) // Destroys chart / resets element\n            setProcessedData(pitchData)\n            toggleLoading(false)\n         })\n    }\n\n    const nextTask = () => {\n        let response = { 'taskData': taskData, 'responseData': processedData }\n        submitResponse()\n    }\n\n    useEffect(() => {\n        // Update the document title using the browser API (next action... taskType determines the element to show)\n        if (processedData === null) {\n            \n            console.log(\"No changes recorded\") \n        } else {\n        console.log(\"Processed data changed:\", processedData)}\n        \n        },[processedData]);\n\n    return (\n        <div className={classes.content}>\n            <Paper className={classes.paper}>\n                <Grid container className={classes.grid}>\n                    <Grid item>\n                        <Paper id=\"question-data-container\" className={classes.chart}>  \n                            <PitchChart data={[]}/>\n                        </Paper>\n                        <Player url={\"https://intonation-trainer.s3.us-east-2.amazonaws.com/test-audio.mp3\"}></Player>\n                    </Grid>\n                        <Grid item>\n                            <Paper id=\"response-data-container\" className={classes.chart} >\n                                {isLoading ? <CircularProgress /> : <PitchChart data={processedData}/>}\n                            </Paper>\n                            <Recorder sets={(data) => {handleAudioChange(data); toggleLoading(true);} }/>\n                        </Grid>\n                    <Grid item>\n                        <Button variant=\"outlined\" onClick={() => {nextTask();}}>Welcome</Button>\n                    </Grid>\n                </Grid>\n            </Paper>\n        </div>\n        );\n    }\n\nexport default withRouter(PerceptionTaskTemplate)\n","import React, { useState, useEffect, useRef } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { CircularProgress } from '@mui/material';\nimport { withRouter, NavLink } from 'react-router-dom';\nimport Recorder from '../elements/Recorder'\nimport Player from '../elements/Player';\nimport { processAudioData, getPitchScatterData } from '../utils/processAudio.js'\nimport { submitResponse } from '../utils/responseHelper'\nimport { PitchChart } from '../elements/AudioCharts';\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    justifyContent: \"center\",\n    display: \"flex\"\n  },\n    paper: {\n        padding: theme.spacing(2),\n        flexDirection: \"row\",\n        minWidth: '100vw',\n        minHeight: '80vh',\n        display:\"flex-box\",\n        elevation: 3,\n        alignItems:\"center\"\n    },\n    container: {\n        position: 'relative',\n        height: '100%',\n        justifyContent: \"center\"\n    },\n    button: {\n        position: 'absolute',\n        bottom:'0',\n        right: '0'\n    },\n    grid: {\n        height: \"50%\",\n        justifyContent:\"space-evenly\",\n        spacing:\"0\",\n        alignItems:\"flex-end\",\n        direction:\"column\",\n        minHeight:\"100%\"\n    },\n\n    chart: {\n        display: 'flex',\n        justifyContent:\"center\",\n        alignItems:\"center\",\n        direction:\"column\",\n        minHeight:\"40%\",\n        marginBottom: \"1vh\",\n        minWidth:\"35vw\",\n    }\n}));\n\nconst ProductionTaskTemplate = (props) => {\n    const classes = useStyles();\n    let [processedData, setProcessedData] = useState({})\n    let [taskData, setTaskData] = useState(true)\n    let [isLoading, toggleLoading] = useState(true)\n\n    let [chartA, setChartA] = useState()\n    let [chartB, setChartB] = useState()\n\n    let responseDataRef = useRef(null);\n    let questionDataRef = useRef(null);\n    \n    let handleAudioChange = (data) => {\n        // let newCanvas = resetCanvas('response-data', 'response-data-container', chartB)\n        console.log(isLoading)\n        processAudioData(data).then((response) => { \n            let pitchData = getPitchScatterData(response.data)\n            // setChartB(newPitchChart(newCanvas, pitchData, chartB)) // Destroys chart / resets element\n            setProcessedData(pitchData)\n            toggleLoading(false)\n         })\n    }\n    \n    const nextTask = () => {\n\n        let response = { 'taskData': taskData, 'responseData': processedData }\n        submitResponse()\n    }\n\n    useEffect(() => {\n        // Update the document title using the browser API (next action... taskType determines the element to show)\n        if (processedData === null) {\n            \n            console.log(\"No changes recorded\") \n        } else {\n        console.log(\"Processed data changed:\", processedData)}\n        \n        },[processedData]);\n\n    return (\n        <div className={classes.content}>\n            <Paper className={classes.paper}>\n                <Grid container className={classes.grid}>\n                    <Grid item>\n                        <Paper id=\"question-data-container\" className={classes.chart}>  \n                            <PitchChart data={[]}/>\n                        </Paper>\n                        <Player url={\"https://intonation-trainer.s3.us-east-2.amazonaws.com/test-audio.mp3\"}></Player>\n                    </Grid>\n                        <Grid item>\n                            <Paper id=\"response-data-container\" className={classes.chart} >\n                                {isLoading ? <CircularProgress /> : <PitchChart data={processedData}/>}\n                            </Paper>\n                            <Recorder sets={(data) => {handleAudioChange(data); toggleLoading(true);} }/>\n                        </Grid>\n                    <Grid item>\n                        <Button variant=\"outlined\" onClick={() => {nextTask();}}>Welcome</Button>\n                    </Grid>\n                </Grid>\n            </Paper>\n        </div>\n        );\n    }\n\nexport default withRouter(ProductionTaskTemplate)\n","import React, { useState, useEffect, useRef} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { withRouter, NavLink } from 'react-router-dom'\nimport Container from '@material-ui/core/Container'\nimport { getResponses } from '../utils/responseHelper';\nimport PerceptionTaskTemplate from './PerceptionTask' \nimport ProductionTaskTemplate from './ProductionTask' \n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    justifyContent: \"center\",\n    display: \"flex\"\n  },\n    paper: {\n      padding: theme.spacing(2),\n      flexDirection: \"column\",\n      minWidth: '100vw',\n      minHeight: '80vh',\n      display:\"flex\",\n      elevation: 3,\n      justifyContent:\"center\",\n      alignItems:\"center\"\n    },\n    container: {\n        position: 'relative',\n        height: '100%',\n        justifyContent: \"center\"\n    },\n    button: {\n        position: 'absolute',\n        bottom:'0',\n        right: '0'\n    },\n    grid: {\n        height: \"50%\",\n        justifyContent:\"center\",\n        spacing:\"0\",\n        alignItems:\"center\",\n        direction:\"column\",\n        minHeight:\"100%\"\n    }\n}));\n\nconst Welcome = (props) => {\n  const [currentTask, setCurrentTask] = useState('/')\n\n  const taskRef = useRef()\n\n  const createTrial = (props) => {\n    getResponses().then((response) => {console.log(response)});\n    return 'production-task'\n\n    // When the user selects Enter, experiement begins. \n    // 1. Trial is created\n    // 2. Responses are intialized\n    \n  }\n  \n  // Entry point: \n    const classes = useStyles();\n\n    useEffect(() =>{\n      const nav = taskRef.current.setAttribute('href', '/production-task')\n      console.log(nav)\n      setCurrentTask('/production-task')\n      \n    }, [])\n  \n    return (\n      <div className={classes.content}>\n        <Paper className={classes.paper}>\n            <Grid container className={classes.grid}>\n                <Typography variant=\"h1\" component=\"h2\" gutterBottom>\n                    Welcome\n                </Typography>\n            </Grid>\n            <Container className={classes.container}>\n              <NavLink className={classes.button} ref={taskRef} to={currentTask} style={{ textDecoration: 'none' }} key= ''>\n                <Button variant=\"outlined\">Enter</Button>\n              </NavLink>\n            </Container>\n        </Paper>\n        </div>\n        );\n    }\n\nexport default withRouter(Welcome);\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport {withRouter, NavLink} from 'react-router-dom'\nimport Container from '@material-ui/core/Container'\n\nconst useStyles = makeStyles((theme) => ({\n  content: {\n    justifyContent: \"center\",\n    display: \"flex\"\n  },\n    paper: {\n      padding: theme.spacing(2),\n      flexDirection: \"column\",\n      minWidth: '100vw',\n      minHeight: '80vh',\n      display:\"flex\",\n      elevation: 3,\n      justifyContent:\"center\",\n      alignItems:\"center\"\n    },\n    container: {\n        position: 'relative',\n        height: '100%',\n        justifyContent: \"center\"\n    },\n    button: {\n        position: 'absolute',\n        bottom:'0',\n        right: '0'\n    },\n    grid: {\n        height: \"50%\",\n        justifyContent:\"center\",\n        spacing:\"0\",\n        alignItems:\"center\",\n        direction:\"column\",\n        minHeight:\"100%\"\n    }\n}));\n\n\nconst End = (props) => {\n\n  const CreateTrial = (props) => {\n\n    // When the user selects Enter, experiement begins. \n    // 1. Trial is created\n    // 2. Responses are intialized\n    \n  }\n  \n  // Entry point: \n    const classes = useStyles();\n  \n    return (\n      <div className={classes.content}>\n        <Paper className={classes.paper}>\n            <Grid container className={classes.grid}>\n                <Typography variant=\"h1\" component=\"h2\" gutterBottom>\n                    Welcome\n                </Typography>\n            </Grid>\n            <Container className={classes.container}>\n              <NavLink className={classes.button} to='/production-task' style={{ textDecoration: 'none' }} key= ''>\n                <Button variant=\"outlined\">Enter</Button>\n              </NavLink>\n            </Container>\n        </Paper>\n        </div>\n        );\n    }\n\nexport default withRouter(End);\n\n","import React, { useState, useEffect } from 'react'\nimport Welcome from './components/pages/Welcome'\nimport PerceptionTaskTemplate from './components/pages/PerceptionTask'\nimport ProductionTaskTemplate from './components/pages/ProductionTask'\nimport End from './components/pages/End'\nimport { MemoryRouter } from \"react-router-dom\"\nimport { Route, Switch } from 'react-router-dom'\n\nexport default function App() {\n\n    return (\n      <div className=\"App\">\n        <MemoryRouter>\n          <Switch>\n            <Route exact path=\"/\" component={Welcome} />\n            <Route path=\"/production-task\" component={ProductionTaskTemplate} />\n            <Route path=\"/perception-task\" component={PerceptionTaskTemplate} />\n            <Route exact path=\"/done\" component={End} />\n          </Switch>\n        </MemoryRouter>\n      </div>\n    );\n  }\n  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}